/*
 * generated by Xtext 2.16.0
 */
package dk.sdu.mdsd.guilang.ui.contentassist

import dk.sdu.mdsd.guilang.guilang.impl.ButtonImpl
import dk.sdu.mdsd.guilang.guilang.impl.CheckboxImpl
import dk.sdu.mdsd.guilang.guilang.impl.InputImpl
import dk.sdu.mdsd.guilang.guilang.impl.LabelImpl
import dk.sdu.mdsd.guilang.guilang.impl.ListImpl
import dk.sdu.mdsd.guilang.guilang.impl.SpecificationImpl
import dk.sdu.mdsd.guilang.guilang.impl.TemplateInstanceImpl
import dk.sdu.mdsd.guilang.guilang.impl.TextAreaImpl
import dk.sdu.mdsd.guilang.validation.AvailableSpecifications
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Keyword
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 * 
 * Useful: https://blogs.itemis.com/en/xtext-hint-content-assist-for-multiple-consecutive-keywords
 */
class GuilangProposalProvider extends AbstractGuilangProposalProvider {
	
	//@Inject extension GuilangGrammarAccess
	
//	override complete_Element(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		super.complete_Element(model, ruleCall, context, acceptor)
//		
//	}
	
//	override complete_Specification(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		super.complete_Specification(model, ruleCall, context, acceptor)
//	}
	
	// Filter out default suggestions
	override completeKeyword(Keyword keyword, ContentAssistContext contentAssistContext, ICompletionProposalAcceptor acceptor) {
		switch(contentAssistContext.currentModel) {
			SpecificationImpl: return
			default: super.completeKeyword(keyword, contentAssistContext, acceptor)
		}
	}
	
	// Add custom suggestions (complete_TheThingYouWant)
	override complete_Option(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if(!(model instanceof SpecificationImpl)) return;
		var spec = model as SpecificationImpl
		println(spec.ref.class)
		var String[] options = AvailableSpecifications.instance.getSpecifications(spec.ref.class).keys
		
		for(o : options) {
			acceptor.accept(createCompletionProposal(o, context))
		}
	}
}
