/*
 * generated by Xtext 2.16.0
 */
package dk.sdu.mdsd.guilang.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GuilangGrammarAccess extends AbstractGrammarElementFinder {
	
	public class GUIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.GUI");
		private final Assignment cMainAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMainMainParserRuleCall_0 = (RuleCall)cMainAssignment.eContents().get(0);
		
		//// ##################################################################
		//// ## TOP LEVEL
		//// ##################################################################
		//GUI:
		//	main=Main
		//	//(templates+=Template)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//main=Main
		public Assignment getMainAssignment() { return cMainAssignment; }
		
		//Main
		public RuleCall getMainMainParserRuleCall_0() { return cMainMainParserRuleCall_0; }
	}
	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cUnitParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Main Unit:
		//	'main' Unit;
		@Override public ParserRule getRule() { return rule; }
		
		//'main' Unit
		public Group getGroup() { return cGroup; }
		
		//'main'
		public Keyword getMainKeyword_0() { return cMainKeyword_0; }
		
		//Unit
		public RuleCall getUnitParserRuleCall_1() { return cUnitParserRuleCall_1; }
	}
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.Unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOPENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cLayoutAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLayoutLayoutParserRuleCall_1_0 = (RuleCall)cLayoutAssignment_1.eContents().get(0);
		private final Assignment cSpecificationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpecificationsSpecificationsParserRuleCall_2_0 = (RuleCall)cSpecificationsAssignment_2.eContents().get(0);
		private final RuleCall cCLOSETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Unit:
		//	OPEN
		//	layout=Layout
		//	specifications=Specifications?
		//	CLOSE;
		@Override public ParserRule getRule() { return rule; }
		
		//OPEN layout=Layout specifications=Specifications? CLOSE
		public Group getGroup() { return cGroup; }
		
		//OPEN
		public RuleCall getOPENTerminalRuleCall_0() { return cOPENTerminalRuleCall_0; }
		
		//layout=Layout
		public Assignment getLayoutAssignment_1() { return cLayoutAssignment_1; }
		
		//Layout
		public RuleCall getLayoutLayoutParserRuleCall_1_0() { return cLayoutLayoutParserRuleCall_1_0; }
		
		//specifications=Specifications?
		public Assignment getSpecificationsAssignment_2() { return cSpecificationsAssignment_2; }
		
		//Specifications
		public RuleCall getSpecificationsSpecificationsParserRuleCall_2_0() { return cSpecificationsSpecificationsParserRuleCall_2_0; }
		
		//CLOSE
		public RuleCall getCLOSETerminalRuleCall_3() { return cCLOSETerminalRuleCall_3; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLayoutTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Entity:
		//	LayoutType | Element;
		@Override public ParserRule getRule() { return rule; }
		
		//LayoutType | Element
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LayoutType
		public RuleCall getLayoutTypeParserRuleCall_0() { return cLayoutTypeParserRuleCall_0; }
		
		//Element
		public RuleCall getElementParserRuleCall_1() { return cElementParserRuleCall_1; }
	}
	public class LayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.Layout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLayoutAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLayoutKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cOPENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cEntitiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEntitiesEntityParserRuleCall_4_0 = (RuleCall)cEntitiesAssignment_4.eContents().get(0);
		private final RuleCall cCLOSETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//// ##################################################################
		//// ## Layouts
		//// ##################################################################
		//Layout:
		//	{Layout} 'layout' name=ID? OPEN
		//	entities+=Entity*
		//	CLOSE;
		@Override public ParserRule getRule() { return rule; }
		
		//{Layout} 'layout' name=ID? OPEN entities+=Entity* CLOSE
		public Group getGroup() { return cGroup; }
		
		//{Layout}
		public Action getLayoutAction_0() { return cLayoutAction_0; }
		
		//'layout'
		public Keyword getLayoutKeyword_1() { return cLayoutKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//OPEN
		public RuleCall getOPENTerminalRuleCall_3() { return cOPENTerminalRuleCall_3; }
		
		//entities+=Entity*
		public Assignment getEntitiesAssignment_4() { return cEntitiesAssignment_4; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_4_0() { return cEntitiesEntityParserRuleCall_4_0; }
		
		//CLOSE
		public RuleCall getCLOSETerminalRuleCall_5() { return cCLOSETerminalRuleCall_5; }
	}
	public class LayoutTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.LayoutType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLayoutParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVerticalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHorizontalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LayoutType:
		//	Layout | Vertical | Horizontal;
		@Override public ParserRule getRule() { return rule; }
		
		//Layout | Vertical | Horizontal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Layout
		public RuleCall getLayoutParserRuleCall_0() { return cLayoutParserRuleCall_0; }
		
		//Vertical
		public RuleCall getVerticalParserRuleCall_1() { return cVerticalParserRuleCall_1; }
		
		//Horizontal
		public RuleCall getHorizontalParserRuleCall_2() { return cHorizontalParserRuleCall_2; }
	}
	public class VerticalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.Vertical");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVerticalAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cVerticalKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cVertKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cOPENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cEntitiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEntitiesEntityParserRuleCall_4_0 = (RuleCall)cEntitiesAssignment_4.eContents().get(0);
		private final RuleCall cCLOSETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Vertical:
		//	{Vertical} ('vertical' | 'vert') name=ID? OPEN
		//	entities+=Entity*
		//	CLOSE;
		@Override public ParserRule getRule() { return rule; }
		
		//{Vertical} ('vertical' | 'vert') name=ID? OPEN entities+=Entity* CLOSE
		public Group getGroup() { return cGroup; }
		
		//{Vertical}
		public Action getVerticalAction_0() { return cVerticalAction_0; }
		
		//'vertical' | 'vert'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'vertical'
		public Keyword getVerticalKeyword_1_0() { return cVerticalKeyword_1_0; }
		
		//'vert'
		public Keyword getVertKeyword_1_1() { return cVertKeyword_1_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//OPEN
		public RuleCall getOPENTerminalRuleCall_3() { return cOPENTerminalRuleCall_3; }
		
		//entities+=Entity*
		public Assignment getEntitiesAssignment_4() { return cEntitiesAssignment_4; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_4_0() { return cEntitiesEntityParserRuleCall_4_0; }
		
		//CLOSE
		public RuleCall getCLOSETerminalRuleCall_5() { return cCLOSETerminalRuleCall_5; }
	}
	public class HorizontalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.Horizontal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHorizontalAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cHorizontalKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHoriKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cOPENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cEntitiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEntitiesEntityParserRuleCall_4_0 = (RuleCall)cEntitiesAssignment_4.eContents().get(0);
		private final RuleCall cCLOSETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Horizontal:
		//	{Horizontal} ('horizontal' | 'hori') name=ID? OPEN
		//	entities+=Entity*
		//	CLOSE;
		@Override public ParserRule getRule() { return rule; }
		
		//{Horizontal} ('horizontal' | 'hori') name=ID? OPEN entities+=Entity* CLOSE
		public Group getGroup() { return cGroup; }
		
		//{Horizontal}
		public Action getHorizontalAction_0() { return cHorizontalAction_0; }
		
		//'horizontal' | 'hori'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'horizontal'
		public Keyword getHorizontalKeyword_1_0() { return cHorizontalKeyword_1_0; }
		
		//'hori'
		public Keyword getHoriKeyword_1_1() { return cHoriKeyword_1_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//OPEN
		public RuleCall getOPENTerminalRuleCall_3() { return cOPENTerminalRuleCall_3; }
		
		//entities+=Entity*
		public Assignment getEntitiesAssignment_4() { return cEntitiesAssignment_4; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_4_0() { return cEntitiesEntityParserRuleCall_4_0; }
		
		//CLOSE
		public RuleCall getCLOSETerminalRuleCall_5() { return cCLOSETerminalRuleCall_5; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cButtonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInputParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCheckboxParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// ##################################################################
		//// ## Elements
		//// ##################################################################
		//Element:
		//	Label | Button | Input | Checkbox;
		@Override public ParserRule getRule() { return rule; }
		
		//Label | Button | Input | Checkbox
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Label
		public RuleCall getLabelParserRuleCall_0() { return cLabelParserRuleCall_0; }
		
		//Button
		public RuleCall getButtonParserRuleCall_1() { return cButtonParserRuleCall_1; }
		
		//Input
		public RuleCall getInputParserRuleCall_2() { return cInputParserRuleCall_2; }
		
		//Checkbox
		public RuleCall getCheckboxParserRuleCall_3() { return cCheckboxParserRuleCall_3; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLabelAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cLABEL_TYPETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Label:
		//	{Label} LABEL_TYPE name=ID?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Label} LABEL_TYPE name=ID?
		public Group getGroup() { return cGroup; }
		
		//{Label}
		public Action getLabelAction_0() { return cLabelAction_0; }
		
		//LABEL_TYPE
		public RuleCall getLABEL_TYPETerminalRuleCall_1() { return cLABEL_TYPETerminalRuleCall_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cButtonAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBUTTON_TYPETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Button:
		//	{Button} BUTTON_TYPE name=ID?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Button} BUTTON_TYPE name=ID?
		public Group getGroup() { return cGroup; }
		
		//{Button}
		public Action getButtonAction_0() { return cButtonAction_0; }
		
		//BUTTON_TYPE
		public RuleCall getBUTTON_TYPETerminalRuleCall_1() { return cBUTTON_TYPETerminalRuleCall_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cINPUT_TYPETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Input:
		//	{Input} INPUT_TYPE name=ID?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Input} INPUT_TYPE name=ID?
		public Group getGroup() { return cGroup; }
		
		//{Input}
		public Action getInputAction_0() { return cInputAction_0; }
		
		//INPUT_TYPE
		public RuleCall getINPUT_TYPETerminalRuleCall_1() { return cINPUT_TYPETerminalRuleCall_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class CheckboxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.Checkbox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCheckboxAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cCHECKBOX_TYPETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Checkbox:
		//	{Checkbox} CHECKBOX_TYPE name=ID?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Checkbox} CHECKBOX_TYPE name=ID?
		public Group getGroup() { return cGroup; }
		
		//{Checkbox}
		public Action getCheckboxAction_0() { return cCheckboxAction_0; }
		
		//CHECKBOX_TYPE
		public RuleCall getCHECKBOX_TYPETerminalRuleCall_1() { return cCHECKBOX_TYPETerminalRuleCall_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class SpecificationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.Specifications");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpecificationsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cElementsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cOPENTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cSpecificationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpecificationsSpecificationParserRuleCall_3_0 = (RuleCall)cSpecificationsAssignment_3.eContents().get(0);
		private final RuleCall cCLOSETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//// ##################################################################
		//// ## Specifications
		//// ##################################################################
		//Specifications:
		//	{Specifications} 'elements' OPEN
		//	specifications+=Specification*
		//	CLOSE;
		@Override public ParserRule getRule() { return rule; }
		
		//{Specifications} 'elements' OPEN specifications+=Specification* CLOSE
		public Group getGroup() { return cGroup; }
		
		//{Specifications}
		public Action getSpecificationsAction_0() { return cSpecificationsAction_0; }
		
		//'elements'
		public Keyword getElementsKeyword_1() { return cElementsKeyword_1; }
		
		//OPEN
		public RuleCall getOPENTerminalRuleCall_2() { return cOPENTerminalRuleCall_2; }
		
		//specifications+=Specification*
		public Assignment getSpecificationsAssignment_3() { return cSpecificationsAssignment_3; }
		
		//Specification
		public RuleCall getSpecificationsSpecificationParserRuleCall_3_0() { return cSpecificationsSpecificationParserRuleCall_3_0; }
		
		//CLOSE
		public RuleCall getCLOSETerminalRuleCall_4() { return cCLOSETerminalRuleCall_4; }
	}
	public class SpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.Specification");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeLayoutSpecParserRuleCall_0_0 = (RuleCall)cTypeAlternatives_0.eContents().get(0);
		private final RuleCall cTypeVerticalSpecParserRuleCall_0_1 = (RuleCall)cTypeAlternatives_0.eContents().get(1);
		private final RuleCall cTypeHorizontalSpecParserRuleCall_0_2 = (RuleCall)cTypeAlternatives_0.eContents().get(2);
		private final RuleCall cTypeLabelSpecParserRuleCall_0_3 = (RuleCall)cTypeAlternatives_0.eContents().get(3);
		private final RuleCall cTypeButtonSpecParserRuleCall_0_4 = (RuleCall)cTypeAlternatives_0.eContents().get(4);
		private final RuleCall cTypeInputSpecParserRuleCall_0_5 = (RuleCall)cTypeAlternatives_0.eContents().get(5);
		private final RuleCall cTypeCheckboxSpecParserRuleCall_0_6 = (RuleCall)cTypeAlternatives_0.eContents().get(6);
		
		//Specification:
		//	type=(LayoutSpec | VerticalSpec | HorizontalSpec | LabelSpec | ButtonSpec | InputSpec | CheckboxSpec);
		@Override public ParserRule getRule() { return rule; }
		
		//type=(LayoutSpec | VerticalSpec | HorizontalSpec | LabelSpec | ButtonSpec | InputSpec | CheckboxSpec)
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//(LayoutSpec | VerticalSpec | HorizontalSpec | LabelSpec | ButtonSpec | InputSpec | CheckboxSpec)
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//LayoutSpec
		public RuleCall getTypeLayoutSpecParserRuleCall_0_0() { return cTypeLayoutSpecParserRuleCall_0_0; }
		
		//VerticalSpec
		public RuleCall getTypeVerticalSpecParserRuleCall_0_1() { return cTypeVerticalSpecParserRuleCall_0_1; }
		
		//HorizontalSpec
		public RuleCall getTypeHorizontalSpecParserRuleCall_0_2() { return cTypeHorizontalSpecParserRuleCall_0_2; }
		
		//LabelSpec
		public RuleCall getTypeLabelSpecParserRuleCall_0_3() { return cTypeLabelSpecParserRuleCall_0_3; }
		
		//ButtonSpec
		public RuleCall getTypeButtonSpecParserRuleCall_0_4() { return cTypeButtonSpecParserRuleCall_0_4; }
		
		//InputSpec
		public RuleCall getTypeInputSpecParserRuleCall_0_5() { return cTypeInputSpecParserRuleCall_0_5; }
		
		//CheckboxSpec
		public RuleCall getTypeCheckboxSpecParserRuleCall_0_6() { return cTypeCheckboxSpecParserRuleCall_0_6; }
	}
	public class LayoutSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.LayoutSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefLayoutCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefLayoutIDTerminalRuleCall_0_0_1 = (RuleCall)cRefLayoutCrossReference_0_0.eContents().get(1);
		private final RuleCall cOPENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLayoutSpecKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cCLOSETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//// ##############################################
		//// ## Layout Specifications
		//// ##############################################
		//LayoutSpec:
		//	ref=[Layout] OPEN
		//	'layout-spec'
		//	CLOSE;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[Layout] OPEN 'layout-spec' CLOSE
		public Group getGroup() { return cGroup; }
		
		//ref=[Layout]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[Layout]
		public CrossReference getRefLayoutCrossReference_0_0() { return cRefLayoutCrossReference_0_0; }
		
		//ID
		public RuleCall getRefLayoutIDTerminalRuleCall_0_0_1() { return cRefLayoutIDTerminalRuleCall_0_0_1; }
		
		//OPEN
		public RuleCall getOPENTerminalRuleCall_1() { return cOPENTerminalRuleCall_1; }
		
		//'layout-spec'
		public Keyword getLayoutSpecKeyword_2() { return cLayoutSpecKeyword_2; }
		
		//CLOSE
		public RuleCall getCLOSETerminalRuleCall_3() { return cCLOSETerminalRuleCall_3; }
	}
	public class VerticalSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.VerticalSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefVerticalCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefVerticalIDTerminalRuleCall_0_0_1 = (RuleCall)cRefVerticalCrossReference_0_0.eContents().get(1);
		private final RuleCall cOPENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cVerticalSpecKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cCLOSETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//VerticalSpec:
		//	ref=[Vertical] OPEN
		//	'vertical-spec'
		//	CLOSE;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[Vertical] OPEN 'vertical-spec' CLOSE
		public Group getGroup() { return cGroup; }
		
		//ref=[Vertical]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[Vertical]
		public CrossReference getRefVerticalCrossReference_0_0() { return cRefVerticalCrossReference_0_0; }
		
		//ID
		public RuleCall getRefVerticalIDTerminalRuleCall_0_0_1() { return cRefVerticalIDTerminalRuleCall_0_0_1; }
		
		//OPEN
		public RuleCall getOPENTerminalRuleCall_1() { return cOPENTerminalRuleCall_1; }
		
		//'vertical-spec'
		public Keyword getVerticalSpecKeyword_2() { return cVerticalSpecKeyword_2; }
		
		//CLOSE
		public RuleCall getCLOSETerminalRuleCall_3() { return cCLOSETerminalRuleCall_3; }
	}
	public class HorizontalSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.HorizontalSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefHorizontalCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefHorizontalIDTerminalRuleCall_0_0_1 = (RuleCall)cRefHorizontalCrossReference_0_0.eContents().get(1);
		private final RuleCall cOPENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cHorizontalSpecKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cCLOSETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//HorizontalSpec:
		//	ref=[Horizontal] OPEN
		//	'horizontal-spec'
		//	CLOSE;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[Horizontal] OPEN 'horizontal-spec' CLOSE
		public Group getGroup() { return cGroup; }
		
		//ref=[Horizontal]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[Horizontal]
		public CrossReference getRefHorizontalCrossReference_0_0() { return cRefHorizontalCrossReference_0_0; }
		
		//ID
		public RuleCall getRefHorizontalIDTerminalRuleCall_0_0_1() { return cRefHorizontalIDTerminalRuleCall_0_0_1; }
		
		//OPEN
		public RuleCall getOPENTerminalRuleCall_1() { return cOPENTerminalRuleCall_1; }
		
		//'horizontal-spec'
		public Keyword getHorizontalSpecKeyword_2() { return cHorizontalSpecKeyword_2; }
		
		//CLOSE
		public RuleCall getCLOSETerminalRuleCall_3() { return cCLOSETerminalRuleCall_3; }
	}
	public class LabelSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.LabelSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefLabelCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefLabelIDTerminalRuleCall_0_0_1 = (RuleCall)cRefLabelCrossReference_0_0.eContents().get(1);
		private final RuleCall cOPENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLabelSpecKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cCLOSETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//// ##############################################
		//// ## Label Specifications 
		//// ##############################################
		//LabelSpec:
		//	ref=[Label] OPEN
		//	'label-spec'
		//	CLOSE;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[Label] OPEN 'label-spec' CLOSE
		public Group getGroup() { return cGroup; }
		
		//ref=[Label]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[Label]
		public CrossReference getRefLabelCrossReference_0_0() { return cRefLabelCrossReference_0_0; }
		
		//ID
		public RuleCall getRefLabelIDTerminalRuleCall_0_0_1() { return cRefLabelIDTerminalRuleCall_0_0_1; }
		
		//OPEN
		public RuleCall getOPENTerminalRuleCall_1() { return cOPENTerminalRuleCall_1; }
		
		//'label-spec'
		public Keyword getLabelSpecKeyword_2() { return cLabelSpecKeyword_2; }
		
		//CLOSE
		public RuleCall getCLOSETerminalRuleCall_3() { return cCLOSETerminalRuleCall_3; }
	}
	public class ButtonSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.ButtonSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefButtonCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefButtonIDTerminalRuleCall_0_0_1 = (RuleCall)cRefButtonCrossReference_0_0.eContents().get(1);
		private final RuleCall cOPENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cButtonSpecKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOptionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOptionsButtonSpecOptionsParserRuleCall_3_0 = (RuleCall)cOptionsAssignment_3.eContents().get(0);
		private final RuleCall cCLOSETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//// ##############################################
		//// ## Button Specifications 
		//// ##############################################
		//ButtonSpec:
		//	ref=[Button] OPEN
		//	'button-spec'
		//	options+=ButtonSpecOptions*
		//	CLOSE;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[Button] OPEN 'button-spec' options+=ButtonSpecOptions* CLOSE
		public Group getGroup() { return cGroup; }
		
		//ref=[Button]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[Button]
		public CrossReference getRefButtonCrossReference_0_0() { return cRefButtonCrossReference_0_0; }
		
		//ID
		public RuleCall getRefButtonIDTerminalRuleCall_0_0_1() { return cRefButtonIDTerminalRuleCall_0_0_1; }
		
		//OPEN
		public RuleCall getOPENTerminalRuleCall_1() { return cOPENTerminalRuleCall_1; }
		
		//'button-spec'
		public Keyword getButtonSpecKeyword_2() { return cButtonSpecKeyword_2; }
		
		//options+=ButtonSpecOptions*
		public Assignment getOptionsAssignment_3() { return cOptionsAssignment_3; }
		
		//ButtonSpecOptions
		public RuleCall getOptionsButtonSpecOptionsParserRuleCall_3_0() { return cOptionsButtonSpecOptionsParserRuleCall_3_0; }
		
		//CLOSE
		public RuleCall getCLOSETerminalRuleCall_4() { return cCLOSETerminalRuleCall_4; }
	}
	public class ButtonSpecOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.ButtonSpecOptions");
		private final RuleCall cRequireElementsParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ButtonSpecOptions:
		//	RequireElements;
		@Override public ParserRule getRule() { return rule; }
		
		//RequireElements
		public RuleCall getRequireElementsParserRuleCall() { return cRequireElementsParserRuleCall; }
	}
	public class InputSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.InputSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefInputCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefInputIDTerminalRuleCall_0_0_1 = (RuleCall)cRefInputCrossReference_0_0.eContents().get(1);
		private final RuleCall cOPENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cInputSpecKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOptionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOptionsInputSpecOptionsParserRuleCall_3_0 = (RuleCall)cOptionsAssignment_3.eContents().get(0);
		private final RuleCall cCLOSETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//// ##############################################
		//// ## Input Field Specifications 
		//// ##############################################
		//InputSpec:
		//	ref=[Input] OPEN
		//	'input-spec'
		//	options+=InputSpecOptions*
		//	CLOSE;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[Input] OPEN 'input-spec' options+=InputSpecOptions* CLOSE
		public Group getGroup() { return cGroup; }
		
		//ref=[Input]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[Input]
		public CrossReference getRefInputCrossReference_0_0() { return cRefInputCrossReference_0_0; }
		
		//ID
		public RuleCall getRefInputIDTerminalRuleCall_0_0_1() { return cRefInputIDTerminalRuleCall_0_0_1; }
		
		//OPEN
		public RuleCall getOPENTerminalRuleCall_1() { return cOPENTerminalRuleCall_1; }
		
		//'input-spec'
		public Keyword getInputSpecKeyword_2() { return cInputSpecKeyword_2; }
		
		//options+=InputSpecOptions*
		public Assignment getOptionsAssignment_3() { return cOptionsAssignment_3; }
		
		//InputSpecOptions
		public RuleCall getOptionsInputSpecOptionsParserRuleCall_3_0() { return cOptionsInputSpecOptionsParserRuleCall_3_0; }
		
		//CLOSE
		public RuleCall getCLOSETerminalRuleCall_4() { return cCLOSETerminalRuleCall_4; }
	}
	public class InputSpecOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.InputSpecOptions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextValidateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRequireElementsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InputSpecOptions:
		//	TextValidate | RequireElements;
		@Override public ParserRule getRule() { return rule; }
		
		//TextValidate | RequireElements
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TextValidate
		public RuleCall getTextValidateParserRuleCall_0() { return cTextValidateParserRuleCall_0; }
		
		//RequireElements
		public RuleCall getRequireElementsParserRuleCall_1() { return cRequireElementsParserRuleCall_1; }
	}
	public class CheckboxSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.CheckboxSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefCheckboxCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefCheckboxIDTerminalRuleCall_0_0_1 = (RuleCall)cRefCheckboxCrossReference_0_0.eContents().get(1);
		private final RuleCall cOPENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cCheckboxSpecKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cCLOSETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//// ##############################################
		//// ## Checkbox Specifications 
		//// ##############################################
		//CheckboxSpec:
		//	ref=[Checkbox] OPEN
		//	'checkbox-spec'
		//	CLOSE;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[Checkbox] OPEN 'checkbox-spec' CLOSE
		public Group getGroup() { return cGroup; }
		
		//ref=[Checkbox]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[Checkbox]
		public CrossReference getRefCheckboxCrossReference_0_0() { return cRefCheckboxCrossReference_0_0; }
		
		//ID
		public RuleCall getRefCheckboxIDTerminalRuleCall_0_0_1() { return cRefCheckboxIDTerminalRuleCall_0_0_1; }
		
		//OPEN
		public RuleCall getOPENTerminalRuleCall_1() { return cOPENTerminalRuleCall_1; }
		
		//'checkbox-spec'
		public Keyword getCheckboxSpecKeyword_2() { return cCheckboxSpecKeyword_2; }
		
		//CLOSE
		public RuleCall getCLOSETerminalRuleCall_3() { return cCLOSETerminalRuleCall_3; }
	}
	public class SizeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.SizeSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cWidthAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cWidthINTTerminalRuleCall_1_0_0_0 = (RuleCall)cWidthAssignment_1_0_0.eContents().get(0);
		private final Keyword cXKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cHeightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cHeightINTTerminalRuleCall_1_0_2_0 = (RuleCall)cHeightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Keyword cWKeyword_1_1_0_0 = (Keyword)cAlternatives_1_1_0.eContents().get(0);
		private final Keyword cWidthKeyword_1_1_0_1 = (Keyword)cAlternatives_1_1_0.eContents().get(1);
		private final Assignment cWidthAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_1_1_1_0 = (RuleCall)cWidthAssignment_1_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_2 = (Alternatives)cGroup_1_1.eContents().get(2);
		private final Keyword cHKeyword_1_1_2_0 = (Keyword)cAlternatives_1_1_2.eContents().get(0);
		private final Keyword cHeightKeyword_1_1_2_1 = (Keyword)cAlternatives_1_1_2.eContents().get(1);
		private final Assignment cHeightAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cHeightINTTerminalRuleCall_1_1_3_0 = (RuleCall)cHeightAssignment_1_1_3.eContents().get(0);
		
		//// ##############################################
		//// ## General Specifications 
		//// ##############################################
		//SizeSpec:
		//	'size' (width=INT 'x' height=INT | ('w' | 'width') width=INT ('h' | 'height') height=INT);
		@Override public ParserRule getRule() { return rule; }
		
		//'size' (width=INT 'x' height=INT | ('w' | 'width') width=INT ('h' | 'height') height=INT)
		public Group getGroup() { return cGroup; }
		
		//'size'
		public Keyword getSizeKeyword_0() { return cSizeKeyword_0; }
		
		//width=INT 'x' height=INT | ('w' | 'width') width=INT ('h' | 'height') height=INT
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//width=INT 'x' height=INT
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//width=INT
		public Assignment getWidthAssignment_1_0_0() { return cWidthAssignment_1_0_0; }
		
		//INT
		public RuleCall getWidthINTTerminalRuleCall_1_0_0_0() { return cWidthINTTerminalRuleCall_1_0_0_0; }
		
		//'x'
		public Keyword getXKeyword_1_0_1() { return cXKeyword_1_0_1; }
		
		//height=INT
		public Assignment getHeightAssignment_1_0_2() { return cHeightAssignment_1_0_2; }
		
		//INT
		public RuleCall getHeightINTTerminalRuleCall_1_0_2_0() { return cHeightINTTerminalRuleCall_1_0_2_0; }
		
		//('w' | 'width') width=INT ('h' | 'height') height=INT
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'w' | 'width'
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//'w'
		public Keyword getWKeyword_1_1_0_0() { return cWKeyword_1_1_0_0; }
		
		//'width'
		public Keyword getWidthKeyword_1_1_0_1() { return cWidthKeyword_1_1_0_1; }
		
		//width=INT
		public Assignment getWidthAssignment_1_1_1() { return cWidthAssignment_1_1_1; }
		
		//INT
		public RuleCall getWidthINTTerminalRuleCall_1_1_1_0() { return cWidthINTTerminalRuleCall_1_1_1_0; }
		
		//'h' | 'height'
		public Alternatives getAlternatives_1_1_2() { return cAlternatives_1_1_2; }
		
		//'h'
		public Keyword getHKeyword_1_1_2_0() { return cHKeyword_1_1_2_0; }
		
		//'height'
		public Keyword getHeightKeyword_1_1_2_1() { return cHeightKeyword_1_1_2_1; }
		
		//height=INT
		public Assignment getHeightAssignment_1_1_3() { return cHeightAssignment_1_1_3; }
		
		//INT
		public RuleCall getHeightINTTerminalRuleCall_1_1_3_0() { return cHeightINTTerminalRuleCall_1_1_3_0; }
	}
	public class ValidateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.Validate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValidateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValidationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValidationsAlternatives_1_0 = (Alternatives)cValidationsAssignment_1.eContents().get(0);
		private final RuleCall cValidationsTextValidateParserRuleCall_1_0_0 = (RuleCall)cValidationsAlternatives_1_0.eContents().get(0);
		private final RuleCall cValidationsCheckboxValidateParserRuleCall_1_0_1 = (RuleCall)cValidationsAlternatives_1_0.eContents().get(1);
		
		//// ##############################################
		//// ## Validations 
		//// ##############################################
		//// ####################################
		//// ## Rules
		//// ####################################
		//Validate:
		//	{Validate} validations+=(TextValidate | CheckboxValidate)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Validate} validations+=(TextValidate | CheckboxValidate)*
		public Group getGroup() { return cGroup; }
		
		//{Validate}
		public Action getValidateAction_0() { return cValidateAction_0; }
		
		//validations+=(TextValidate | CheckboxValidate)*
		public Assignment getValidationsAssignment_1() { return cValidationsAssignment_1; }
		
		//(TextValidate | CheckboxValidate)
		public Alternatives getValidationsAlternatives_1_0() { return cValidationsAlternatives_1_0; }
		
		//TextValidate
		public RuleCall getValidationsTextValidateParserRuleCall_1_0_0() { return cValidationsTextValidateParserRuleCall_1_0_0; }
		
		//CheckboxValidate
		public RuleCall getValidationsCheckboxValidateParserRuleCall_1_0_1() { return cValidationsCheckboxValidateParserRuleCall_1_0_1; }
	}
	public class TextValidateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.TextValidate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValidateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValidationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValidationAlternatives_1_0 = (Alternatives)cValidationAssignment_1.eContents().get(0);
		private final RuleCall cValidationRegexValidateParserRuleCall_1_0_0 = (RuleCall)cValidationAlternatives_1_0.eContents().get(0);
		private final RuleCall cValidationRegexVariableRefParserRuleCall_1_0_1 = (RuleCall)cValidationAlternatives_1_0.eContents().get(1);
		private final RuleCall cValidationPresetTextValidateParserRuleCall_1_0_2 = (RuleCall)cValidationAlternatives_1_0.eContents().get(2);
		
		//TextValidate:
		//	'validate' validation=(RegexValidate | RegexVariableRef | PresetTextValidate);
		@Override public ParserRule getRule() { return rule; }
		
		//'validate' validation=(RegexValidate | RegexVariableRef | PresetTextValidate)
		public Group getGroup() { return cGroup; }
		
		//'validate'
		public Keyword getValidateKeyword_0() { return cValidateKeyword_0; }
		
		//validation=(RegexValidate | RegexVariableRef | PresetTextValidate)
		public Assignment getValidationAssignment_1() { return cValidationAssignment_1; }
		
		//(RegexValidate | RegexVariableRef | PresetTextValidate)
		public Alternatives getValidationAlternatives_1_0() { return cValidationAlternatives_1_0; }
		
		//RegexValidate
		public RuleCall getValidationRegexValidateParserRuleCall_1_0_0() { return cValidationRegexValidateParserRuleCall_1_0_0; }
		
		//RegexVariableRef
		public RuleCall getValidationRegexVariableRefParserRuleCall_1_0_1() { return cValidationRegexVariableRefParserRuleCall_1_0_1; }
		
		//PresetTextValidate
		public RuleCall getValidationPresetTextValidateParserRuleCall_1_0_2() { return cValidationPresetTextValidateParserRuleCall_1_0_2; }
	}
	public class RegexValidateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.RegexValidate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegexKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//RegexValidate:
		//	'regex' '=' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'regex' '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'regex'
		public Keyword getRegexKeyword_0() { return cRegexKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class RegexVariableValidateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.RegexVariableValidate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValidationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//RegexVariableValidate:
		//	'validation' '=' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'validation' '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'validation'
		public Keyword getValidationKeyword_0() { return cValidationKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class RegexVariableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.RegexVariableRef");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefRegexVariableValidateCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefRegexVariableValidateIDTerminalRuleCall_0_1 = (RuleCall)cRefRegexVariableValidateCrossReference_0.eContents().get(1);
		
		//RegexVariableRef:
		//	ref=[RegexVariableValidate];
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[RegexVariableValidate]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[RegexVariableValidate]
		public CrossReference getRefRegexVariableValidateCrossReference_0() { return cRefRegexVariableValidateCrossReference_0; }
		
		//ID
		public RuleCall getRefRegexVariableValidateIDTerminalRuleCall_0_1() { return cRefRegexVariableValidateIDTerminalRuleCall_0_1; }
	}
	public class PresetTextValidateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.PresetTextValidate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cValueValPasswordKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cValueValEmailKeyword_1_0 = (Keyword)cValueAssignment_1.eContents().get(0);
		
		///* enum */ PresetTextValidate:
		//	value='val-password' | value='val-email'
		//	// etc...
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value='val-password' | value='val-email'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value='val-password'
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//'val-password'
		public Keyword getValueValPasswordKeyword_0_0() { return cValueValPasswordKeyword_0_0; }
		
		//value='val-email'
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//'val-email'
		public Keyword getValueValEmailKeyword_1_0() { return cValueValEmailKeyword_1_0; }
	}
	public class CheckboxValidateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.CheckboxValidate");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueIsCheckedKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueIsUncheckedKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//CheckboxValidate:
		//	value=('is-checked' | 'is-unchecked');
		@Override public ParserRule getRule() { return rule; }
		
		//value=('is-checked' | 'is-unchecked')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('is-checked' | 'is-unchecked')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'is-checked'
		public Keyword getValueIsCheckedKeyword_0_0() { return cValueIsCheckedKeyword_0_0; }
		
		//'is-unchecked'
		public Keyword getValueIsUncheckedKeyword_0_1() { return cValueIsUncheckedKeyword_0_1; }
	}
	public class RequireElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.RequireElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsRequireParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//// ####################################
		//// ## Requires
		//// ####################################
		//RequireElements:
		//	'require' elements=Require;
		@Override public ParserRule getRule() { return rule; }
		
		//'require' elements=Require
		public Group getGroup() { return cGroup; }
		
		//'require'
		public Keyword getRequireKeyword_0() { return cRequireKeyword_0; }
		
		//elements=Require
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Require
		public RuleCall getElementsRequireParserRuleCall_1_0() { return cElementsRequireParserRuleCall_1_0; }
	}
	public class RequireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.Require");
		private final RuleCall cRequireOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Require:
		//	RequireOr;
		@Override public ParserRule getRule() { return rule; }
		
		//RequireOr
		public RuleCall getRequireOrParserRuleCall() { return cRequireOrParserRuleCall; }
	}
	public class RequireOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.RequireOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRequireAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRequireAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RequireOr Require:
		//	RequireAnd ({Or.left=current} '||' right=RequireAnd)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RequireAnd ({Or.left=current} '||' right=RequireAnd)*
		public Group getGroup() { return cGroup; }
		
		//RequireAnd
		public RuleCall getRequireAndParserRuleCall_0() { return cRequireAndParserRuleCall_0; }
		
		//({Or.left=current} '||' right=RequireAnd)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=RequireAnd
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//RequireAnd
		public RuleCall getRightRequireAndParserRuleCall_1_2_0() { return cRightRequireAndParserRuleCall_1_2_0; }
	}
	public class RequireAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.RequireAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRequireBaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRequireBaseParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RequireAnd Require:
		//	RequireBase ({And.left=current} '&&' right=RequireBase)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RequireBase ({And.left=current} '&&' right=RequireBase)*
		public Group getGroup() { return cGroup; }
		
		//RequireBase
		public RuleCall getRequireBaseParserRuleCall_0() { return cRequireBaseParserRuleCall_0; }
		
		//({And.left=current} '&&' right=RequireBase)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//right=RequireBase
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//RequireBase
		public RuleCall getRightRequireBaseParserRuleCall_1_2_0() { return cRightRequireBaseParserRuleCall_1_2_0; }
	}
	public class RequireBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.RequireBase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpRequireParserRuleCall_0_1_0 = (RuleCall)cExpAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cNOTKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cExpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpRequireBaseParserRuleCall_1_2_0 = (RuleCall)cExpAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cElementRefAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cRefAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRefElementCrossReference_2_1_0 = (CrossReference)cRefAssignment_2_1.eContents().get(0);
		private final RuleCall cRefElementIDTerminalRuleCall_2_1_0_1 = (RuleCall)cRefElementCrossReference_2_1_0.eContents().get(1);
		
		//RequireBase Require:
		//	'(' exp=Require ')' | {Not} ('!' | 'NOT') exp=RequireBase | {ElementRef} ref=[Element];
		@Override public ParserRule getRule() { return rule; }
		
		//'(' exp=Require ')' | {Not} ('!' | 'NOT') exp=RequireBase | {ElementRef} ref=[Element]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' exp=Require ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//exp=Require
		public Assignment getExpAssignment_0_1() { return cExpAssignment_0_1; }
		
		//Require
		public RuleCall getExpRequireParserRuleCall_0_1_0() { return cExpRequireParserRuleCall_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Not} ('!' | 'NOT') exp=RequireBase
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//'!' | 'NOT'
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_1_0() { return cExclamationMarkKeyword_1_1_0; }
		
		//'NOT'
		public Keyword getNOTKeyword_1_1_1() { return cNOTKeyword_1_1_1; }
		
		//exp=RequireBase
		public Assignment getExpAssignment_1_2() { return cExpAssignment_1_2; }
		
		//RequireBase
		public RuleCall getExpRequireBaseParserRuleCall_1_2_0() { return cExpRequireBaseParserRuleCall_1_2_0; }
		
		//{ElementRef} ref=[Element]
		public Group getGroup_2() { return cGroup_2; }
		
		//{ElementRef}
		public Action getElementRefAction_2_0() { return cElementRefAction_2_0; }
		
		//ref=[Element]
		public Assignment getRefAssignment_2_1() { return cRefAssignment_2_1; }
		
		//[Element]
		public CrossReference getRefElementCrossReference_2_1_0() { return cRefElementCrossReference_2_1_0; }
		
		//ID
		public RuleCall getRefElementIDTerminalRuleCall_2_1_0_1() { return cRefElementIDTerminalRuleCall_2_1_0_1; }
	}
	
	
	private final GUIElements pGUI;
	private final MainElements pMain;
	private final UnitElements pUnit;
	private final EntityElements pEntity;
	private final LayoutElements pLayout;
	private final LayoutTypeElements pLayoutType;
	private final VerticalElements pVertical;
	private final HorizontalElements pHorizontal;
	private final ElementElements pElement;
	private final LabelElements pLabel;
	private final ButtonElements pButton;
	private final InputElements pInput;
	private final CheckboxElements pCheckbox;
	private final SpecificationsElements pSpecifications;
	private final SpecificationElements pSpecification;
	private final LayoutSpecElements pLayoutSpec;
	private final VerticalSpecElements pVerticalSpec;
	private final HorizontalSpecElements pHorizontalSpec;
	private final LabelSpecElements pLabelSpec;
	private final ButtonSpecElements pButtonSpec;
	private final ButtonSpecOptionsElements pButtonSpecOptions;
	private final InputSpecElements pInputSpec;
	private final InputSpecOptionsElements pInputSpecOptions;
	private final CheckboxSpecElements pCheckboxSpec;
	private final SizeSpecElements pSizeSpec;
	private final ValidateElements pValidate;
	private final TextValidateElements pTextValidate;
	private final RegexValidateElements pRegexValidate;
	private final RegexVariableValidateElements pRegexVariableValidate;
	private final RegexVariableRefElements pRegexVariableRef;
	private final PresetTextValidateElements pPresetTextValidate;
	private final CheckboxValidateElements pCheckboxValidate;
	private final RequireElementsElements pRequireElements;
	private final RequireElements pRequire;
	private final RequireOrElements pRequireOr;
	private final RequireAndElements pRequireAnd;
	private final RequireBaseElements pRequireBase;
	private final TerminalRule tOPEN;
	private final TerminalRule tCLOSE;
	private final TerminalRule tBUTTON_TYPE;
	private final TerminalRule tINPUT_TYPE;
	private final TerminalRule tLABEL_TYPE;
	private final TerminalRule tCHECKBOX_TYPE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GuilangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGUI = new GUIElements();
		this.pMain = new MainElements();
		this.pUnit = new UnitElements();
		this.pEntity = new EntityElements();
		this.pLayout = new LayoutElements();
		this.pLayoutType = new LayoutTypeElements();
		this.pVertical = new VerticalElements();
		this.pHorizontal = new HorizontalElements();
		this.pElement = new ElementElements();
		this.pLabel = new LabelElements();
		this.pButton = new ButtonElements();
		this.pInput = new InputElements();
		this.pCheckbox = new CheckboxElements();
		this.pSpecifications = new SpecificationsElements();
		this.pSpecification = new SpecificationElements();
		this.pLayoutSpec = new LayoutSpecElements();
		this.pVerticalSpec = new VerticalSpecElements();
		this.pHorizontalSpec = new HorizontalSpecElements();
		this.pLabelSpec = new LabelSpecElements();
		this.pButtonSpec = new ButtonSpecElements();
		this.pButtonSpecOptions = new ButtonSpecOptionsElements();
		this.pInputSpec = new InputSpecElements();
		this.pInputSpecOptions = new InputSpecOptionsElements();
		this.pCheckboxSpec = new CheckboxSpecElements();
		this.pSizeSpec = new SizeSpecElements();
		this.pValidate = new ValidateElements();
		this.pTextValidate = new TextValidateElements();
		this.pRegexValidate = new RegexValidateElements();
		this.pRegexVariableValidate = new RegexVariableValidateElements();
		this.pRegexVariableRef = new RegexVariableRefElements();
		this.pPresetTextValidate = new PresetTextValidateElements();
		this.pCheckboxValidate = new CheckboxValidateElements();
		this.pRequireElements = new RequireElementsElements();
		this.pRequire = new RequireElements();
		this.pRequireOr = new RequireOrElements();
		this.pRequireAnd = new RequireAndElements();
		this.pRequireBase = new RequireBaseElements();
		this.tOPEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.OPEN");
		this.tCLOSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.CLOSE");
		this.tBUTTON_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.BUTTON_TYPE");
		this.tINPUT_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.INPUT_TYPE");
		this.tLABEL_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.LABEL_TYPE");
		this.tCHECKBOX_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.guilang.Guilang.CHECKBOX_TYPE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.mdsd.guilang.Guilang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// ##################################################################
	//// ## TOP LEVEL
	//// ##################################################################
	//GUI:
	//	main=Main
	//	//(templates+=Template)*
	//;
	public GUIElements getGUIAccess() {
		return pGUI;
	}
	
	public ParserRule getGUIRule() {
		return getGUIAccess().getRule();
	}
	
	//Main Unit:
	//	'main' Unit;
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}
	
	//Unit:
	//	OPEN
	//	layout=Layout
	//	specifications=Specifications?
	//	CLOSE;
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//Entity:
	//	LayoutType | Element;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//// ##################################################################
	//// ## Layouts
	//// ##################################################################
	//Layout:
	//	{Layout} 'layout' name=ID? OPEN
	//	entities+=Entity*
	//	CLOSE;
	public LayoutElements getLayoutAccess() {
		return pLayout;
	}
	
	public ParserRule getLayoutRule() {
		return getLayoutAccess().getRule();
	}
	
	//LayoutType:
	//	Layout | Vertical | Horizontal;
	public LayoutTypeElements getLayoutTypeAccess() {
		return pLayoutType;
	}
	
	public ParserRule getLayoutTypeRule() {
		return getLayoutTypeAccess().getRule();
	}
	
	//Vertical:
	//	{Vertical} ('vertical' | 'vert') name=ID? OPEN
	//	entities+=Entity*
	//	CLOSE;
	public VerticalElements getVerticalAccess() {
		return pVertical;
	}
	
	public ParserRule getVerticalRule() {
		return getVerticalAccess().getRule();
	}
	
	//Horizontal:
	//	{Horizontal} ('horizontal' | 'hori') name=ID? OPEN
	//	entities+=Entity*
	//	CLOSE;
	public HorizontalElements getHorizontalAccess() {
		return pHorizontal;
	}
	
	public ParserRule getHorizontalRule() {
		return getHorizontalAccess().getRule();
	}
	
	//// ##################################################################
	//// ## Elements
	//// ##################################################################
	//Element:
	//	Label | Button | Input | Checkbox;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Label:
	//	{Label} LABEL_TYPE name=ID?;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//Button:
	//	{Button} BUTTON_TYPE name=ID?;
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}
	
	//Input:
	//	{Input} INPUT_TYPE name=ID?;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Checkbox:
	//	{Checkbox} CHECKBOX_TYPE name=ID?;
	public CheckboxElements getCheckboxAccess() {
		return pCheckbox;
	}
	
	public ParserRule getCheckboxRule() {
		return getCheckboxAccess().getRule();
	}
	
	//// ##################################################################
	//// ## Specifications
	//// ##################################################################
	//Specifications:
	//	{Specifications} 'elements' OPEN
	//	specifications+=Specification*
	//	CLOSE;
	public SpecificationsElements getSpecificationsAccess() {
		return pSpecifications;
	}
	
	public ParserRule getSpecificationsRule() {
		return getSpecificationsAccess().getRule();
	}
	
	//Specification:
	//	type=(LayoutSpec | VerticalSpec | HorizontalSpec | LabelSpec | ButtonSpec | InputSpec | CheckboxSpec);
	public SpecificationElements getSpecificationAccess() {
		return pSpecification;
	}
	
	public ParserRule getSpecificationRule() {
		return getSpecificationAccess().getRule();
	}
	
	//// ##############################################
	//// ## Layout Specifications
	//// ##############################################
	//LayoutSpec:
	//	ref=[Layout] OPEN
	//	'layout-spec'
	//	CLOSE;
	public LayoutSpecElements getLayoutSpecAccess() {
		return pLayoutSpec;
	}
	
	public ParserRule getLayoutSpecRule() {
		return getLayoutSpecAccess().getRule();
	}
	
	//VerticalSpec:
	//	ref=[Vertical] OPEN
	//	'vertical-spec'
	//	CLOSE;
	public VerticalSpecElements getVerticalSpecAccess() {
		return pVerticalSpec;
	}
	
	public ParserRule getVerticalSpecRule() {
		return getVerticalSpecAccess().getRule();
	}
	
	//HorizontalSpec:
	//	ref=[Horizontal] OPEN
	//	'horizontal-spec'
	//	CLOSE;
	public HorizontalSpecElements getHorizontalSpecAccess() {
		return pHorizontalSpec;
	}
	
	public ParserRule getHorizontalSpecRule() {
		return getHorizontalSpecAccess().getRule();
	}
	
	//// ##############################################
	//// ## Label Specifications 
	//// ##############################################
	//LabelSpec:
	//	ref=[Label] OPEN
	//	'label-spec'
	//	CLOSE;
	public LabelSpecElements getLabelSpecAccess() {
		return pLabelSpec;
	}
	
	public ParserRule getLabelSpecRule() {
		return getLabelSpecAccess().getRule();
	}
	
	//// ##############################################
	//// ## Button Specifications 
	//// ##############################################
	//ButtonSpec:
	//	ref=[Button] OPEN
	//	'button-spec'
	//	options+=ButtonSpecOptions*
	//	CLOSE;
	public ButtonSpecElements getButtonSpecAccess() {
		return pButtonSpec;
	}
	
	public ParserRule getButtonSpecRule() {
		return getButtonSpecAccess().getRule();
	}
	
	//ButtonSpecOptions:
	//	RequireElements;
	public ButtonSpecOptionsElements getButtonSpecOptionsAccess() {
		return pButtonSpecOptions;
	}
	
	public ParserRule getButtonSpecOptionsRule() {
		return getButtonSpecOptionsAccess().getRule();
	}
	
	//// ##############################################
	//// ## Input Field Specifications 
	//// ##############################################
	//InputSpec:
	//	ref=[Input] OPEN
	//	'input-spec'
	//	options+=InputSpecOptions*
	//	CLOSE;
	public InputSpecElements getInputSpecAccess() {
		return pInputSpec;
	}
	
	public ParserRule getInputSpecRule() {
		return getInputSpecAccess().getRule();
	}
	
	//InputSpecOptions:
	//	TextValidate | RequireElements;
	public InputSpecOptionsElements getInputSpecOptionsAccess() {
		return pInputSpecOptions;
	}
	
	public ParserRule getInputSpecOptionsRule() {
		return getInputSpecOptionsAccess().getRule();
	}
	
	//// ##############################################
	//// ## Checkbox Specifications 
	//// ##############################################
	//CheckboxSpec:
	//	ref=[Checkbox] OPEN
	//	'checkbox-spec'
	//	CLOSE;
	public CheckboxSpecElements getCheckboxSpecAccess() {
		return pCheckboxSpec;
	}
	
	public ParserRule getCheckboxSpecRule() {
		return getCheckboxSpecAccess().getRule();
	}
	
	//// ##############################################
	//// ## General Specifications 
	//// ##############################################
	//SizeSpec:
	//	'size' (width=INT 'x' height=INT | ('w' | 'width') width=INT ('h' | 'height') height=INT);
	public SizeSpecElements getSizeSpecAccess() {
		return pSizeSpec;
	}
	
	public ParserRule getSizeSpecRule() {
		return getSizeSpecAccess().getRule();
	}
	
	//// ##############################################
	//// ## Validations 
	//// ##############################################
	//// ####################################
	//// ## Rules
	//// ####################################
	//Validate:
	//	{Validate} validations+=(TextValidate | CheckboxValidate)*;
	public ValidateElements getValidateAccess() {
		return pValidate;
	}
	
	public ParserRule getValidateRule() {
		return getValidateAccess().getRule();
	}
	
	//TextValidate:
	//	'validate' validation=(RegexValidate | RegexVariableRef | PresetTextValidate);
	public TextValidateElements getTextValidateAccess() {
		return pTextValidate;
	}
	
	public ParserRule getTextValidateRule() {
		return getTextValidateAccess().getRule();
	}
	
	//RegexValidate:
	//	'regex' '=' value=STRING;
	public RegexValidateElements getRegexValidateAccess() {
		return pRegexValidate;
	}
	
	public ParserRule getRegexValidateRule() {
		return getRegexValidateAccess().getRule();
	}
	
	//RegexVariableValidate:
	//	'validation' '=' value=STRING;
	public RegexVariableValidateElements getRegexVariableValidateAccess() {
		return pRegexVariableValidate;
	}
	
	public ParserRule getRegexVariableValidateRule() {
		return getRegexVariableValidateAccess().getRule();
	}
	
	//RegexVariableRef:
	//	ref=[RegexVariableValidate];
	public RegexVariableRefElements getRegexVariableRefAccess() {
		return pRegexVariableRef;
	}
	
	public ParserRule getRegexVariableRefRule() {
		return getRegexVariableRefAccess().getRule();
	}
	
	///* enum */ PresetTextValidate:
	//	value='val-password' | value='val-email'
	//	// etc...
	//;
	public PresetTextValidateElements getPresetTextValidateAccess() {
		return pPresetTextValidate;
	}
	
	public ParserRule getPresetTextValidateRule() {
		return getPresetTextValidateAccess().getRule();
	}
	
	//CheckboxValidate:
	//	value=('is-checked' | 'is-unchecked');
	public CheckboxValidateElements getCheckboxValidateAccess() {
		return pCheckboxValidate;
	}
	
	public ParserRule getCheckboxValidateRule() {
		return getCheckboxValidateAccess().getRule();
	}
	
	//// ####################################
	//// ## Requires
	//// ####################################
	//RequireElements:
	//	'require' elements=Require;
	public RequireElementsElements getRequireElementsAccess() {
		return pRequireElements;
	}
	
	public ParserRule getRequireElementsRule() {
		return getRequireElementsAccess().getRule();
	}
	
	//Require:
	//	RequireOr;
	public RequireElements getRequireAccess() {
		return pRequire;
	}
	
	public ParserRule getRequireRule() {
		return getRequireAccess().getRule();
	}
	
	//RequireOr Require:
	//	RequireAnd ({Or.left=current} '||' right=RequireAnd)*;
	public RequireOrElements getRequireOrAccess() {
		return pRequireOr;
	}
	
	public ParserRule getRequireOrRule() {
		return getRequireOrAccess().getRule();
	}
	
	//RequireAnd Require:
	//	RequireBase ({And.left=current} '&&' right=RequireBase)*;
	public RequireAndElements getRequireAndAccess() {
		return pRequireAnd;
	}
	
	public ParserRule getRequireAndRule() {
		return getRequireAndAccess().getRule();
	}
	
	//RequireBase Require:
	//	'(' exp=Require ')' | {Not} ('!' | 'NOT') exp=RequireBase | {ElementRef} ref=[Element];
	public RequireBaseElements getRequireBaseAccess() {
		return pRequireBase;
	}
	
	public ParserRule getRequireBaseRule() {
		return getRequireBaseAccess().getRule();
	}
	
	//terminal OPEN:
	//	'{';
	public TerminalRule getOPENRule() {
		return tOPEN;
	}
	
	//terminal CLOSE:
	//	'}';
	public TerminalRule getCLOSERule() {
		return tCLOSE;
	}
	
	//terminal BUTTON_TYPE:
	//	'btn' | 'button';
	public TerminalRule getBUTTON_TYPERule() {
		return tBUTTON_TYPE;
	}
	
	//terminal INPUT_TYPE:
	//	'field' | 'input';
	public TerminalRule getINPUT_TYPERule() {
		return tINPUT_TYPE;
	}
	
	//terminal LABEL_TYPE:
	//	'lbl' | 'label';
	public TerminalRule getLABEL_TYPERule() {
		return tLABEL_TYPE;
	}
	
	//terminal CHECKBOX_TYPE:
	//	'chk' | 'checkbox';
	public TerminalRule getCHECKBOX_TYPERule() {
		return tCHECKBOX_TYPE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
