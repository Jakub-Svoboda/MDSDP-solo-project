/*
 * generated by Xtext 2.16.0
 */
grammar InternalGuilang;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package dk.sdu.mdsd.guilang.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package dk.sdu.mdsd.guilang.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import dk.sdu.mdsd.guilang.services.GuilangGrammarAccess;

}

@parser::members {

 	private GuilangGrammarAccess grammarAccess;

    public InternalGuilangParser(TokenStream input, GuilangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "GUI";
   	}

   	@Override
   	protected GuilangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleGUI
entryRuleGUI returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGUIRule()); }
	iv_ruleGUI=ruleGUI
	{ $current=$iv_ruleGUI.current; }
	EOF;

// Rule GUI
ruleGUI returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getGUIAccess().getMainMainParserRuleCall_0());
			}
			lv_main_0_0=ruleMain
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getGUIRule());
				}
				set(
					$current,
					"main",
					lv_main_0_0,
					"dk.sdu.mdsd.guilang.Guilang.Main");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleMain
entryRuleMain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainRule()); }
	iv_ruleMain=ruleMain
	{ $current=$iv_ruleMain.current; }
	EOF;

// Rule Main
ruleMain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='main'
		{
			newLeafNode(otherlv_0, grammarAccess.getMainAccess().getMainKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getMainAccess().getUnitParserRuleCall_1());
		}
		this_Unit_1=ruleUnit
		{
			$current = $this_Unit_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleUnit
entryRuleUnit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnitRule()); }
	iv_ruleUnit=ruleUnit
	{ $current=$iv_ruleUnit.current; }
	EOF;

// Rule Unit
ruleUnit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_OPEN_0=RULE_OPEN
		{
			newLeafNode(this_OPEN_0, grammarAccess.getUnitAccess().getOPENTerminalRuleCall_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnitAccess().getLayoutLayoutParserRuleCall_1_0());
				}
				lv_layout_1_0=ruleLayout
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnitRule());
					}
					set(
						$current,
						"layout",
						lv_layout_1_0,
						"dk.sdu.mdsd.guilang.Guilang.Layout");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnitAccess().getSpecificationsSpecificationsParserRuleCall_2_0());
				}
				lv_specifications_2_0=ruleSpecifications
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnitRule());
					}
					set(
						$current,
						"specifications",
						lv_specifications_2_0,
						"dk.sdu.mdsd.guilang.Guilang.Specifications");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		this_CLOSE_3=RULE_CLOSE
		{
			newLeafNode(this_CLOSE_3, grammarAccess.getUnitAccess().getCLOSETerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	iv_ruleEntity=ruleEntity
	{ $current=$iv_ruleEntity.current; }
	EOF;

// Rule Entity
ruleEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEntityAccess().getLayoutTypeParserRuleCall_0());
		}
		this_LayoutType_0=ruleLayoutType
		{
			$current = $this_LayoutType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEntityAccess().getElementParserRuleCall_1());
		}
		this_Element_1=ruleElement
		{
			$current = $this_Element_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLayout
entryRuleLayout returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLayoutRule()); }
	iv_ruleLayout=ruleLayout
	{ $current=$iv_ruleLayout.current; }
	EOF;

// Rule Layout
ruleLayout returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLayoutAccess().getLayoutAction_0(),
					$current);
			}
		)
		otherlv_1='layout'
		{
			newLeafNode(otherlv_1, grammarAccess.getLayoutAccess().getLayoutKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getLayoutAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLayoutRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		this_OPEN_3=RULE_OPEN
		{
			newLeafNode(this_OPEN_3, grammarAccess.getLayoutAccess().getOPENTerminalRuleCall_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLayoutAccess().getEntitiesEntityParserRuleCall_4_0());
				}
				lv_entities_4_0=ruleEntity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLayoutRule());
					}
					add(
						$current,
						"entities",
						lv_entities_4_0,
						"dk.sdu.mdsd.guilang.Guilang.Entity");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		this_CLOSE_5=RULE_CLOSE
		{
			newLeafNode(this_CLOSE_5, grammarAccess.getLayoutAccess().getCLOSETerminalRuleCall_5());
		}
	)
;

// Entry rule entryRuleLayoutType
entryRuleLayoutType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLayoutTypeRule()); }
	iv_ruleLayoutType=ruleLayoutType
	{ $current=$iv_ruleLayoutType.current; }
	EOF;

// Rule LayoutType
ruleLayoutType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLayoutTypeAccess().getLayoutParserRuleCall_0());
		}
		this_Layout_0=ruleLayout
		{
			$current = $this_Layout_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLayoutTypeAccess().getVerticalParserRuleCall_1());
		}
		this_Vertical_1=ruleVertical
		{
			$current = $this_Vertical_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLayoutTypeAccess().getHorizontalParserRuleCall_2());
		}
		this_Horizontal_2=ruleHorizontal
		{
			$current = $this_Horizontal_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVertical
entryRuleVertical returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVerticalRule()); }
	iv_ruleVertical=ruleVertical
	{ $current=$iv_ruleVertical.current; }
	EOF;

// Rule Vertical
ruleVertical returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVerticalAccess().getVerticalAction_0(),
					$current);
			}
		)
		(
			otherlv_1='vertical'
			{
				newLeafNode(otherlv_1, grammarAccess.getVerticalAccess().getVerticalKeyword_1_0());
			}
			    |
			otherlv_2='vert'
			{
				newLeafNode(otherlv_2, grammarAccess.getVerticalAccess().getVertKeyword_1_1());
			}
		)
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getVerticalAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVerticalRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		this_OPEN_4=RULE_OPEN
		{
			newLeafNode(this_OPEN_4, grammarAccess.getVerticalAccess().getOPENTerminalRuleCall_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVerticalAccess().getEntitiesEntityParserRuleCall_4_0());
				}
				lv_entities_5_0=ruleEntity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVerticalRule());
					}
					add(
						$current,
						"entities",
						lv_entities_5_0,
						"dk.sdu.mdsd.guilang.Guilang.Entity");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		this_CLOSE_6=RULE_CLOSE
		{
			newLeafNode(this_CLOSE_6, grammarAccess.getVerticalAccess().getCLOSETerminalRuleCall_5());
		}
	)
;

// Entry rule entryRuleHorizontal
entryRuleHorizontal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHorizontalRule()); }
	iv_ruleHorizontal=ruleHorizontal
	{ $current=$iv_ruleHorizontal.current; }
	EOF;

// Rule Horizontal
ruleHorizontal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getHorizontalAccess().getHorizontalAction_0(),
					$current);
			}
		)
		(
			otherlv_1='horizontal'
			{
				newLeafNode(otherlv_1, grammarAccess.getHorizontalAccess().getHorizontalKeyword_1_0());
			}
			    |
			otherlv_2='hori'
			{
				newLeafNode(otherlv_2, grammarAccess.getHorizontalAccess().getHoriKeyword_1_1());
			}
		)
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getHorizontalAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHorizontalRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		this_OPEN_4=RULE_OPEN
		{
			newLeafNode(this_OPEN_4, grammarAccess.getHorizontalAccess().getOPENTerminalRuleCall_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHorizontalAccess().getEntitiesEntityParserRuleCall_4_0());
				}
				lv_entities_5_0=ruleEntity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHorizontalRule());
					}
					add(
						$current,
						"entities",
						lv_entities_5_0,
						"dk.sdu.mdsd.guilang.Guilang.Entity");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		this_CLOSE_6=RULE_CLOSE
		{
			newLeafNode(this_CLOSE_6, grammarAccess.getHorizontalAccess().getCLOSETerminalRuleCall_5());
		}
	)
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementAccess().getLabelParserRuleCall_0());
		}
		this_Label_0=ruleLabel
		{
			$current = $this_Label_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getButtonParserRuleCall_1());
		}
		this_Button_1=ruleButton
		{
			$current = $this_Button_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getInputParserRuleCall_2());
		}
		this_Input_2=ruleInput
		{
			$current = $this_Input_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getCheckboxParserRuleCall_3());
		}
		this_Checkbox_3=ruleCheckbox
		{
			$current = $this_Checkbox_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLabel
entryRuleLabel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabelRule()); }
	iv_ruleLabel=ruleLabel
	{ $current=$iv_ruleLabel.current; }
	EOF;

// Rule Label
ruleLabel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLabelAccess().getLabelAction_0(),
					$current);
			}
		)
		this_LABEL_TYPE_1=RULE_LABEL_TYPE
		{
			newLeafNode(this_LABEL_TYPE_1, grammarAccess.getLabelAccess().getLABEL_TYPETerminalRuleCall_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLabelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
	)
;

// Entry rule entryRuleButton
entryRuleButton returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getButtonRule()); }
	iv_ruleButton=ruleButton
	{ $current=$iv_ruleButton.current; }
	EOF;

// Rule Button
ruleButton returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getButtonAccess().getButtonAction_0(),
					$current);
			}
		)
		this_BUTTON_TYPE_1=RULE_BUTTON_TYPE
		{
			newLeafNode(this_BUTTON_TYPE_1, grammarAccess.getButtonAccess().getBUTTON_TYPETerminalRuleCall_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getButtonAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getButtonRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
	)
;

// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	iv_ruleInput=ruleInput
	{ $current=$iv_ruleInput.current; }
	EOF;

// Rule Input
ruleInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInputAccess().getInputAction_0(),
					$current);
			}
		)
		this_INPUT_TYPE_1=RULE_INPUT_TYPE
		{
			newLeafNode(this_INPUT_TYPE_1, grammarAccess.getInputAccess().getINPUT_TYPETerminalRuleCall_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getInputAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInputRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
	)
;

// Entry rule entryRuleCheckbox
entryRuleCheckbox returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCheckboxRule()); }
	iv_ruleCheckbox=ruleCheckbox
	{ $current=$iv_ruleCheckbox.current; }
	EOF;

// Rule Checkbox
ruleCheckbox returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCheckboxAccess().getCheckboxAction_0(),
					$current);
			}
		)
		this_CHECKBOX_TYPE_1=RULE_CHECKBOX_TYPE
		{
			newLeafNode(this_CHECKBOX_TYPE_1, grammarAccess.getCheckboxAccess().getCHECKBOX_TYPETerminalRuleCall_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getCheckboxAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCheckboxRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
	)
;

// Entry rule entryRuleSpecifications
entryRuleSpecifications returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSpecificationsRule()); }
	iv_ruleSpecifications=ruleSpecifications
	{ $current=$iv_ruleSpecifications.current; }
	EOF;

// Rule Specifications
ruleSpecifications returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSpecificationsAccess().getSpecificationsAction_0(),
					$current);
			}
		)
		otherlv_1='elements'
		{
			newLeafNode(otherlv_1, grammarAccess.getSpecificationsAccess().getElementsKeyword_1());
		}
		this_OPEN_2=RULE_OPEN
		{
			newLeafNode(this_OPEN_2, grammarAccess.getSpecificationsAccess().getOPENTerminalRuleCall_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSpecificationsAccess().getSpecificationsSpecificationParserRuleCall_3_0());
				}
				lv_specifications_3_0=ruleSpecification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecificationsRule());
					}
					add(
						$current,
						"specifications",
						lv_specifications_3_0,
						"dk.sdu.mdsd.guilang.Guilang.Specification");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		this_CLOSE_4=RULE_CLOSE
		{
			newLeafNode(this_CLOSE_4, grammarAccess.getSpecificationsAccess().getCLOSETerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleSpecification
entryRuleSpecification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSpecificationRule()); }
	iv_ruleSpecification=ruleSpecification
	{ $current=$iv_ruleSpecification.current; }
	EOF;

// Rule Specification
ruleSpecification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSpecificationAccess().getTypeLayoutSpecParserRuleCall_0_0());
				}
				lv_type_0_1=ruleLayoutSpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecificationRule());
					}
					set(
						$current,
						"type",
						lv_type_0_1,
						"dk.sdu.mdsd.guilang.Guilang.LayoutSpec");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSpecificationAccess().getTypeVerticalSpecParserRuleCall_0_1());
				}
				lv_type_0_2=ruleVerticalSpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecificationRule());
					}
					set(
						$current,
						"type",
						lv_type_0_2,
						"dk.sdu.mdsd.guilang.Guilang.VerticalSpec");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSpecificationAccess().getTypeHorizontalSpecParserRuleCall_0_2());
				}
				lv_type_0_3=ruleHorizontalSpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecificationRule());
					}
					set(
						$current,
						"type",
						lv_type_0_3,
						"dk.sdu.mdsd.guilang.Guilang.HorizontalSpec");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSpecificationAccess().getTypeLabelSpecParserRuleCall_0_3());
				}
				lv_type_0_4=ruleLabelSpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecificationRule());
					}
					set(
						$current,
						"type",
						lv_type_0_4,
						"dk.sdu.mdsd.guilang.Guilang.LabelSpec");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSpecificationAccess().getTypeButtonSpecParserRuleCall_0_4());
				}
				lv_type_0_5=ruleButtonSpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecificationRule());
					}
					set(
						$current,
						"type",
						lv_type_0_5,
						"dk.sdu.mdsd.guilang.Guilang.ButtonSpec");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSpecificationAccess().getTypeInputSpecParserRuleCall_0_5());
				}
				lv_type_0_6=ruleInputSpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecificationRule());
					}
					set(
						$current,
						"type",
						lv_type_0_6,
						"dk.sdu.mdsd.guilang.Guilang.InputSpec");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSpecificationAccess().getTypeCheckboxSpecParserRuleCall_0_6());
				}
				lv_type_0_7=ruleCheckboxSpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecificationRule());
					}
					set(
						$current,
						"type",
						lv_type_0_7,
						"dk.sdu.mdsd.guilang.Guilang.CheckboxSpec");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLayoutSpec
entryRuleLayoutSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLayoutSpecRule()); }
	iv_ruleLayoutSpec=ruleLayoutSpec
	{ $current=$iv_ruleLayoutSpec.current; }
	EOF;

// Rule LayoutSpec
ruleLayoutSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLayoutSpecRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getLayoutSpecAccess().getRefLayoutCrossReference_0_0());
				}
			)
		)
		this_OPEN_1=RULE_OPEN
		{
			newLeafNode(this_OPEN_1, grammarAccess.getLayoutSpecAccess().getOPENTerminalRuleCall_1());
		}
		otherlv_2='layout-spec'
		{
			newLeafNode(otherlv_2, grammarAccess.getLayoutSpecAccess().getLayoutSpecKeyword_2());
		}
		this_CLOSE_3=RULE_CLOSE
		{
			newLeafNode(this_CLOSE_3, grammarAccess.getLayoutSpecAccess().getCLOSETerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleVerticalSpec
entryRuleVerticalSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVerticalSpecRule()); }
	iv_ruleVerticalSpec=ruleVerticalSpec
	{ $current=$iv_ruleVerticalSpec.current; }
	EOF;

// Rule VerticalSpec
ruleVerticalSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVerticalSpecRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getVerticalSpecAccess().getRefVerticalCrossReference_0_0());
				}
			)
		)
		this_OPEN_1=RULE_OPEN
		{
			newLeafNode(this_OPEN_1, grammarAccess.getVerticalSpecAccess().getOPENTerminalRuleCall_1());
		}
		otherlv_2='vertical-spec'
		{
			newLeafNode(otherlv_2, grammarAccess.getVerticalSpecAccess().getVerticalSpecKeyword_2());
		}
		this_CLOSE_3=RULE_CLOSE
		{
			newLeafNode(this_CLOSE_3, grammarAccess.getVerticalSpecAccess().getCLOSETerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleHorizontalSpec
entryRuleHorizontalSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHorizontalSpecRule()); }
	iv_ruleHorizontalSpec=ruleHorizontalSpec
	{ $current=$iv_ruleHorizontalSpec.current; }
	EOF;

// Rule HorizontalSpec
ruleHorizontalSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHorizontalSpecRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getHorizontalSpecAccess().getRefHorizontalCrossReference_0_0());
				}
			)
		)
		this_OPEN_1=RULE_OPEN
		{
			newLeafNode(this_OPEN_1, grammarAccess.getHorizontalSpecAccess().getOPENTerminalRuleCall_1());
		}
		otherlv_2='horizontal-spec'
		{
			newLeafNode(otherlv_2, grammarAccess.getHorizontalSpecAccess().getHorizontalSpecKeyword_2());
		}
		this_CLOSE_3=RULE_CLOSE
		{
			newLeafNode(this_CLOSE_3, grammarAccess.getHorizontalSpecAccess().getCLOSETerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleLabelSpec
entryRuleLabelSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabelSpecRule()); }
	iv_ruleLabelSpec=ruleLabelSpec
	{ $current=$iv_ruleLabelSpec.current; }
	EOF;

// Rule LabelSpec
ruleLabelSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLabelSpecRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getLabelSpecAccess().getRefLabelCrossReference_0_0());
				}
			)
		)
		this_OPEN_1=RULE_OPEN
		{
			newLeafNode(this_OPEN_1, grammarAccess.getLabelSpecAccess().getOPENTerminalRuleCall_1());
		}
		otherlv_2='label-spec'
		{
			newLeafNode(otherlv_2, grammarAccess.getLabelSpecAccess().getLabelSpecKeyword_2());
		}
		this_CLOSE_3=RULE_CLOSE
		{
			newLeafNode(this_CLOSE_3, grammarAccess.getLabelSpecAccess().getCLOSETerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleButtonSpec
entryRuleButtonSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getButtonSpecRule()); }
	iv_ruleButtonSpec=ruleButtonSpec
	{ $current=$iv_ruleButtonSpec.current; }
	EOF;

// Rule ButtonSpec
ruleButtonSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getButtonSpecRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getButtonSpecAccess().getRefButtonCrossReference_0_0());
				}
			)
		)
		this_OPEN_1=RULE_OPEN
		{
			newLeafNode(this_OPEN_1, grammarAccess.getButtonSpecAccess().getOPENTerminalRuleCall_1());
		}
		otherlv_2='button-spec'
		{
			newLeafNode(otherlv_2, grammarAccess.getButtonSpecAccess().getButtonSpecKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getButtonSpecAccess().getOptionsButtonSpecOptionsParserRuleCall_3_0());
				}
				lv_options_3_0=ruleButtonSpecOptions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getButtonSpecRule());
					}
					add(
						$current,
						"options",
						lv_options_3_0,
						"dk.sdu.mdsd.guilang.Guilang.ButtonSpecOptions");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		this_CLOSE_4=RULE_CLOSE
		{
			newLeafNode(this_CLOSE_4, grammarAccess.getButtonSpecAccess().getCLOSETerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleButtonSpecOptions
entryRuleButtonSpecOptions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getButtonSpecOptionsRule()); }
	iv_ruleButtonSpecOptions=ruleButtonSpecOptions
	{ $current=$iv_ruleButtonSpecOptions.current; }
	EOF;

// Rule ButtonSpecOptions
ruleButtonSpecOptions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getButtonSpecOptionsAccess().getRequireElementsParserRuleCall());
	}
	this_RequireElements_0=ruleRequireElements
	{
		$current = $this_RequireElements_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleInputSpec
entryRuleInputSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputSpecRule()); }
	iv_ruleInputSpec=ruleInputSpec
	{ $current=$iv_ruleInputSpec.current; }
	EOF;

// Rule InputSpec
ruleInputSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInputSpecRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getInputSpecAccess().getRefInputCrossReference_0_0());
				}
			)
		)
		this_OPEN_1=RULE_OPEN
		{
			newLeafNode(this_OPEN_1, grammarAccess.getInputSpecAccess().getOPENTerminalRuleCall_1());
		}
		otherlv_2='input-spec'
		{
			newLeafNode(otherlv_2, grammarAccess.getInputSpecAccess().getInputSpecKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInputSpecAccess().getOptionsInputSpecOptionsParserRuleCall_3_0());
				}
				lv_options_3_0=ruleInputSpecOptions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputSpecRule());
					}
					add(
						$current,
						"options",
						lv_options_3_0,
						"dk.sdu.mdsd.guilang.Guilang.InputSpecOptions");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		this_CLOSE_4=RULE_CLOSE
		{
			newLeafNode(this_CLOSE_4, grammarAccess.getInputSpecAccess().getCLOSETerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleInputSpecOptions
entryRuleInputSpecOptions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputSpecOptionsRule()); }
	iv_ruleInputSpecOptions=ruleInputSpecOptions
	{ $current=$iv_ruleInputSpecOptions.current; }
	EOF;

// Rule InputSpecOptions
ruleInputSpecOptions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInputSpecOptionsAccess().getTextValidateParserRuleCall_0());
		}
		this_TextValidate_0=ruleTextValidate
		{
			$current = $this_TextValidate_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInputSpecOptionsAccess().getRequireElementsParserRuleCall_1());
		}
		this_RequireElements_1=ruleRequireElements
		{
			$current = $this_RequireElements_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCheckboxSpec
entryRuleCheckboxSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCheckboxSpecRule()); }
	iv_ruleCheckboxSpec=ruleCheckboxSpec
	{ $current=$iv_ruleCheckboxSpec.current; }
	EOF;

// Rule CheckboxSpec
ruleCheckboxSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCheckboxSpecRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getCheckboxSpecAccess().getRefCheckboxCrossReference_0_0());
				}
			)
		)
		this_OPEN_1=RULE_OPEN
		{
			newLeafNode(this_OPEN_1, grammarAccess.getCheckboxSpecAccess().getOPENTerminalRuleCall_1());
		}
		otherlv_2='checkbox-spec'
		{
			newLeafNode(otherlv_2, grammarAccess.getCheckboxSpecAccess().getCheckboxSpecKeyword_2());
		}
		this_CLOSE_3=RULE_CLOSE
		{
			newLeafNode(this_CLOSE_3, grammarAccess.getCheckboxSpecAccess().getCLOSETerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleTextValidate
entryRuleTextValidate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTextValidateRule()); }
	iv_ruleTextValidate=ruleTextValidate
	{ $current=$iv_ruleTextValidate.current; }
	EOF;

// Rule TextValidate
ruleTextValidate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='validate'
		{
			newLeafNode(otherlv_0, grammarAccess.getTextValidateAccess().getValidateKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTextValidateAccess().getValidationRegexValidateParserRuleCall_1_0_0());
					}
					lv_validation_1_1=ruleRegexValidate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTextValidateRule());
						}
						set(
							$current,
							"validation",
							lv_validation_1_1,
							"dk.sdu.mdsd.guilang.Guilang.RegexValidate");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getTextValidateAccess().getValidationRegexVariableRefParserRuleCall_1_0_1());
					}
					lv_validation_1_2=ruleRegexVariableRef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTextValidateRule());
						}
						set(
							$current,
							"validation",
							lv_validation_1_2,
							"dk.sdu.mdsd.guilang.Guilang.RegexVariableRef");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getTextValidateAccess().getValidationPresetTextValidateParserRuleCall_1_0_2());
					}
					lv_validation_1_3=rulePresetTextValidate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTextValidateRule());
						}
						set(
							$current,
							"validation",
							lv_validation_1_3,
							"dk.sdu.mdsd.guilang.Guilang.PresetTextValidate");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleRegexValidate
entryRuleRegexValidate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegexValidateRule()); }
	iv_ruleRegexValidate=ruleRegexValidate
	{ $current=$iv_ruleRegexValidate.current; }
	EOF;

// Rule RegexValidate
ruleRegexValidate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='regex'
		{
			newLeafNode(otherlv_0, grammarAccess.getRegexValidateAccess().getRegexKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getRegexValidateAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_STRING
				{
					newLeafNode(lv_value_2_0, grammarAccess.getRegexValidateAccess().getValueSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRegexValidateRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleRegexVariableRef
entryRuleRegexVariableRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegexVariableRefRule()); }
	iv_ruleRegexVariableRef=ruleRegexVariableRef
	{ $current=$iv_ruleRegexVariableRef.current; }
	EOF;

// Rule RegexVariableRef
ruleRegexVariableRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getRegexVariableRefRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getRegexVariableRefAccess().getRefRegexVariableValidateCrossReference_0());
			}
		)
	)
;

// Entry rule entryRulePresetTextValidate
entryRulePresetTextValidate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPresetTextValidateRule()); }
	iv_rulePresetTextValidate=rulePresetTextValidate
	{ $current=$iv_rulePresetTextValidate.current; }
	EOF;

// Rule PresetTextValidate
rulePresetTextValidate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0='val-password'
				{
					newLeafNode(lv_value_0_0, grammarAccess.getPresetTextValidateAccess().getValueValPasswordKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPresetTextValidateRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_0, "val-password");
				}
			)
		)
		    |
		(
			(
				lv_value_1_0='val-email'
				{
					newLeafNode(lv_value_1_0, grammarAccess.getPresetTextValidateAccess().getValueValEmailKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPresetTextValidateRule());
					}
					setWithLastConsumed($current, "value", lv_value_1_0, "val-email");
				}
			)
		)
	)
;

// Entry rule entryRuleCheckboxValidate
entryRuleCheckboxValidate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCheckboxValidateRule()); }
	iv_ruleCheckboxValidate=ruleCheckboxValidate
	{ $current=$iv_ruleCheckboxValidate.current; }
	EOF;

// Rule CheckboxValidate
ruleCheckboxValidate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_1='is-checked'
				{
					newLeafNode(lv_value_0_1, grammarAccess.getCheckboxValidateAccess().getValueIsCheckedKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCheckboxValidateRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_1, null);
				}
				    |
				lv_value_0_2='is-unchecked'
				{
					newLeafNode(lv_value_0_2, grammarAccess.getCheckboxValidateAccess().getValueIsUncheckedKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCheckboxValidateRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_2, null);
				}
			)
		)
	)
;

// Entry rule entryRuleRequireElements
entryRuleRequireElements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequireElementsRule()); }
	iv_ruleRequireElements=ruleRequireElements
	{ $current=$iv_ruleRequireElements.current; }
	EOF;

// Rule RequireElements
ruleRequireElements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='require'
		{
			newLeafNode(otherlv_0, grammarAccess.getRequireElementsAccess().getRequireKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRequireElementsAccess().getElementsRequireParserRuleCall_1_0());
				}
				lv_elements_1_0=ruleRequire
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRequireElementsRule());
					}
					set(
						$current,
						"elements",
						lv_elements_1_0,
						"dk.sdu.mdsd.guilang.Guilang.Require");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRequire
entryRuleRequire returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequireRule()); }
	iv_ruleRequire=ruleRequire
	{ $current=$iv_ruleRequire.current; }
	EOF;

// Rule Require
ruleRequire returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getRequireAccess().getRequireOrParserRuleCall());
	}
	this_RequireOr_0=ruleRequireOr
	{
		$current = $this_RequireOr_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleRequireOr
entryRuleRequireOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequireOrRule()); }
	iv_ruleRequireOr=ruleRequireOr
	{ $current=$iv_ruleRequireOr.current; }
	EOF;

// Rule RequireOr
ruleRequireOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRequireOrAccess().getRequireAndParserRuleCall_0());
		}
		this_RequireAnd_0=ruleRequireAnd
		{
			$current = $this_RequireAnd_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRequireOrAccess().getOrLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='||'
			{
				newLeafNode(otherlv_2, grammarAccess.getRequireOrAccess().getVerticalLineVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRequireOrAccess().getRightRequireAndParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleRequireAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRequireOrRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"dk.sdu.mdsd.guilang.Guilang.RequireAnd");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRequireAnd
entryRuleRequireAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequireAndRule()); }
	iv_ruleRequireAnd=ruleRequireAnd
	{ $current=$iv_ruleRequireAnd.current; }
	EOF;

// Rule RequireAnd
ruleRequireAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRequireAndAccess().getRequireBaseParserRuleCall_0());
		}
		this_RequireBase_0=ruleRequireBase
		{
			$current = $this_RequireBase_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRequireAndAccess().getAndLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='&&'
			{
				newLeafNode(otherlv_2, grammarAccess.getRequireAndAccess().getAmpersandAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRequireAndAccess().getRightRequireBaseParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleRequireBase
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRequireAndRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"dk.sdu.mdsd.guilang.Guilang.RequireBase");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRequireBase
entryRuleRequireBase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequireBaseRule()); }
	iv_ruleRequireBase=ruleRequireBase
	{ $current=$iv_ruleRequireBase.current; }
	EOF;

// Rule RequireBase
ruleRequireBase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getRequireBaseAccess().getLeftParenthesisKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRequireBaseAccess().getExpRequireParserRuleCall_0_1_0());
					}
					lv_exp_1_0=ruleRequire
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRequireBaseRule());
						}
						set(
							$current,
							"exp",
							lv_exp_1_0,
							"dk.sdu.mdsd.guilang.Guilang.Require");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getRequireBaseAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRequireBaseAccess().getNotAction_1_0(),
						$current);
				}
			)
			(
				otherlv_4='!'
				{
					newLeafNode(otherlv_4, grammarAccess.getRequireBaseAccess().getExclamationMarkKeyword_1_1_0());
				}
				    |
				otherlv_5='NOT'
				{
					newLeafNode(otherlv_5, grammarAccess.getRequireBaseAccess().getNOTKeyword_1_1_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRequireBaseAccess().getExpRequireBaseParserRuleCall_1_2_0());
					}
					lv_exp_6_0=ruleRequireBase
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRequireBaseRule());
						}
						set(
							$current,
							"exp",
							lv_exp_6_0,
							"dk.sdu.mdsd.guilang.Guilang.RequireBase");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRequireBaseAccess().getElementRefAction_2_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRequireBaseRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getRequireBaseAccess().getRefElementCrossReference_2_1_0());
					}
				)
			)
		)
	)
;

RULE_OPEN : '{';

RULE_CLOSE : '}';

RULE_BUTTON_TYPE : ('btn'|'button');

RULE_INPUT_TYPE : ('field'|'input');

RULE_LABEL_TYPE : ('lbl'|'label');

RULE_CHECKBOX_TYPE : ('chk'|'checkbox');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
