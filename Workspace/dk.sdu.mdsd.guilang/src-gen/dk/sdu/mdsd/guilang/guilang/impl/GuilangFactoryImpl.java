/**
 * generated by Xtext 2.16.0
 */
package dk.sdu.mdsd.guilang.guilang.impl;

import dk.sdu.mdsd.guilang.guilang.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class GuilangFactoryImpl extends EFactoryImpl implements GuilangFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static GuilangFactory init()
  {
    try
    {
      GuilangFactory theGuilangFactory = (GuilangFactory)EPackage.Registry.INSTANCE.getEFactory(GuilangPackage.eNS_URI);
      if (theGuilangFactory != null)
      {
        return theGuilangFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new GuilangFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GuilangFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case GuilangPackage.GUI: return createGUI();
      case GuilangPackage.UNIT: return createUnit();
      case GuilangPackage.ENTITY: return createEntity();
      case GuilangPackage.LAYOUT: return createLayout();
      case GuilangPackage.LAYOUT_TYPE: return createLayoutType();
      case GuilangPackage.VERTICAL: return createVertical();
      case GuilangPackage.HORIZONTAL: return createHorizontal();
      case GuilangPackage.ELEMENT: return createElement();
      case GuilangPackage.LABEL: return createLabel();
      case GuilangPackage.BUTTON: return createButton();
      case GuilangPackage.INPUT: return createInput();
      case GuilangPackage.CHECKBOX: return createCheckbox();
      case GuilangPackage.SPECIFICATIONS: return createSpecifications();
      case GuilangPackage.SPECIFICATION: return createSpecification();
      case GuilangPackage.LAYOUT_SPEC: return createLayoutSpec();
      case GuilangPackage.VERTICAL_SPEC: return createVerticalSpec();
      case GuilangPackage.HORIZONTAL_SPEC: return createHorizontalSpec();
      case GuilangPackage.LABEL_SPEC: return createLabelSpec();
      case GuilangPackage.BUTTON_SPEC: return createButtonSpec();
      case GuilangPackage.BUTTON_SPEC_OPTIONS: return createButtonSpecOptions();
      case GuilangPackage.INPUT_SPEC: return createInputSpec();
      case GuilangPackage.INPUT_SPEC_OPTIONS: return createInputSpecOptions();
      case GuilangPackage.CHECKBOX_SPEC: return createCheckboxSpec();
      case GuilangPackage.SIZE_SPEC: return createSizeSpec();
      case GuilangPackage.VALIDATE: return createValidate();
      case GuilangPackage.TEXT_VALIDATE: return createTextValidate();
      case GuilangPackage.REGEX_VALIDATE: return createRegexValidate();
      case GuilangPackage.REGEX_VARIABLE_VALIDATE: return createRegexVariableValidate();
      case GuilangPackage.REGEX_VARIABLE_REF: return createRegexVariableRef();
      case GuilangPackage.PRESET_TEXT_VALIDATE: return createPresetTextValidate();
      case GuilangPackage.CHECKBOX_VALIDATE: return createCheckboxValidate();
      case GuilangPackage.REQUIRE_ELEMENTS: return createRequireElements();
      case GuilangPackage.REQUIRE: return createRequire();
      case GuilangPackage.OR: return createOr();
      case GuilangPackage.AND: return createAnd();
      case GuilangPackage.NOT: return createNot();
      case GuilangPackage.ELEMENT_REF: return createElementRef();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GUI createGUI()
  {
    GUIImpl gui = new GUIImpl();
    return gui;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Unit createUnit()
  {
    UnitImpl unit = new UnitImpl();
    return unit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Layout createLayout()
  {
    LayoutImpl layout = new LayoutImpl();
    return layout;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LayoutType createLayoutType()
  {
    LayoutTypeImpl layoutType = new LayoutTypeImpl();
    return layoutType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Vertical createVertical()
  {
    VerticalImpl vertical = new VerticalImpl();
    return vertical;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Horizontal createHorizontal()
  {
    HorizontalImpl horizontal = new HorizontalImpl();
    return horizontal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Label createLabel()
  {
    LabelImpl label = new LabelImpl();
    return label;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Button createButton()
  {
    ButtonImpl button = new ButtonImpl();
    return button;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Input createInput()
  {
    InputImpl input = new InputImpl();
    return input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Checkbox createCheckbox()
  {
    CheckboxImpl checkbox = new CheckboxImpl();
    return checkbox;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Specifications createSpecifications()
  {
    SpecificationsImpl specifications = new SpecificationsImpl();
    return specifications;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Specification createSpecification()
  {
    SpecificationImpl specification = new SpecificationImpl();
    return specification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LayoutSpec createLayoutSpec()
  {
    LayoutSpecImpl layoutSpec = new LayoutSpecImpl();
    return layoutSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VerticalSpec createVerticalSpec()
  {
    VerticalSpecImpl verticalSpec = new VerticalSpecImpl();
    return verticalSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HorizontalSpec createHorizontalSpec()
  {
    HorizontalSpecImpl horizontalSpec = new HorizontalSpecImpl();
    return horizontalSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LabelSpec createLabelSpec()
  {
    LabelSpecImpl labelSpec = new LabelSpecImpl();
    return labelSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ButtonSpec createButtonSpec()
  {
    ButtonSpecImpl buttonSpec = new ButtonSpecImpl();
    return buttonSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ButtonSpecOptions createButtonSpecOptions()
  {
    ButtonSpecOptionsImpl buttonSpecOptions = new ButtonSpecOptionsImpl();
    return buttonSpecOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InputSpec createInputSpec()
  {
    InputSpecImpl inputSpec = new InputSpecImpl();
    return inputSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InputSpecOptions createInputSpecOptions()
  {
    InputSpecOptionsImpl inputSpecOptions = new InputSpecOptionsImpl();
    return inputSpecOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CheckboxSpec createCheckboxSpec()
  {
    CheckboxSpecImpl checkboxSpec = new CheckboxSpecImpl();
    return checkboxSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SizeSpec createSizeSpec()
  {
    SizeSpecImpl sizeSpec = new SizeSpecImpl();
    return sizeSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Validate createValidate()
  {
    ValidateImpl validate = new ValidateImpl();
    return validate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TextValidate createTextValidate()
  {
    TextValidateImpl textValidate = new TextValidateImpl();
    return textValidate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegexValidate createRegexValidate()
  {
    RegexValidateImpl regexValidate = new RegexValidateImpl();
    return regexValidate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegexVariableValidate createRegexVariableValidate()
  {
    RegexVariableValidateImpl regexVariableValidate = new RegexVariableValidateImpl();
    return regexVariableValidate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegexVariableRef createRegexVariableRef()
  {
    RegexVariableRefImpl regexVariableRef = new RegexVariableRefImpl();
    return regexVariableRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PresetTextValidate createPresetTextValidate()
  {
    PresetTextValidateImpl presetTextValidate = new PresetTextValidateImpl();
    return presetTextValidate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CheckboxValidate createCheckboxValidate()
  {
    CheckboxValidateImpl checkboxValidate = new CheckboxValidateImpl();
    return checkboxValidate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RequireElements createRequireElements()
  {
    RequireElementsImpl requireElements = new RequireElementsImpl();
    return requireElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Require createRequire()
  {
    RequireImpl require = new RequireImpl();
    return require;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Or createOr()
  {
    OrImpl or = new OrImpl();
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Not createNot()
  {
    NotImpl not = new NotImpl();
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElementRef createElementRef()
  {
    ElementRefImpl elementRef = new ElementRefImpl();
    return elementRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GuilangPackage getGuilangPackage()
  {
    return (GuilangPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static GuilangPackage getPackage()
  {
    return GuilangPackage.eINSTANCE;
  }

} //GuilangFactoryImpl
