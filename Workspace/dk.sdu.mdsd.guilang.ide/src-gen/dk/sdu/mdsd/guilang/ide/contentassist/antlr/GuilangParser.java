/*
 * generated by Xtext 2.16.0
 */
package dk.sdu.mdsd.guilang.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import dk.sdu.mdsd.guilang.ide.contentassist.antlr.internal.InternalGuilangParser;
import dk.sdu.mdsd.guilang.services.GuilangGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GuilangParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GuilangGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GuilangGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEntityAccess().getAlternatives(), "rule__Entity__Alternatives");
			builder.put(grammarAccess.getLayoutTypeAccess().getAlternatives(), "rule__LayoutType__Alternatives");
			builder.put(grammarAccess.getVerticalAccess().getAlternatives_1(), "rule__Vertical__Alternatives_1");
			builder.put(grammarAccess.getHorizontalAccess().getAlternatives_1(), "rule__Horizontal__Alternatives_1");
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getSpecificationAccess().getTypeAlternatives_0(), "rule__Specification__TypeAlternatives_0");
			builder.put(grammarAccess.getInputSpecOptionsAccess().getAlternatives(), "rule__InputSpecOptions__Alternatives");
			builder.put(grammarAccess.getSizeSpecAccess().getAlternatives_1(), "rule__SizeSpec__Alternatives_1");
			builder.put(grammarAccess.getSizeSpecAccess().getAlternatives_1_1_0(), "rule__SizeSpec__Alternatives_1_1_0");
			builder.put(grammarAccess.getSizeSpecAccess().getAlternatives_1_1_2(), "rule__SizeSpec__Alternatives_1_1_2");
			builder.put(grammarAccess.getValidateAccess().getValidationsAlternatives_1_0(), "rule__Validate__ValidationsAlternatives_1_0");
			builder.put(grammarAccess.getTextValidateAccess().getValidationAlternatives_1_0(), "rule__TextValidate__ValidationAlternatives_1_0");
			builder.put(grammarAccess.getPresetTextValidateAccess().getAlternatives(), "rule__PresetTextValidate__Alternatives");
			builder.put(grammarAccess.getCheckboxValidateAccess().getValueAlternatives_0(), "rule__CheckboxValidate__ValueAlternatives_0");
			builder.put(grammarAccess.getRequireBaseAccess().getAlternatives(), "rule__RequireBase__Alternatives");
			builder.put(grammarAccess.getRequireBaseAccess().getAlternatives_1_1(), "rule__RequireBase__Alternatives_1_1");
			builder.put(grammarAccess.getMainAccess().getGroup(), "rule__Main__Group__0");
			builder.put(grammarAccess.getUnitAccess().getGroup(), "rule__Unit__Group__0");
			builder.put(grammarAccess.getLayoutAccess().getGroup(), "rule__Layout__Group__0");
			builder.put(grammarAccess.getVerticalAccess().getGroup(), "rule__Vertical__Group__0");
			builder.put(grammarAccess.getHorizontalAccess().getGroup(), "rule__Horizontal__Group__0");
			builder.put(grammarAccess.getLabelAccess().getGroup(), "rule__Label__Group__0");
			builder.put(grammarAccess.getButtonAccess().getGroup(), "rule__Button__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
			builder.put(grammarAccess.getCheckboxAccess().getGroup(), "rule__Checkbox__Group__0");
			builder.put(grammarAccess.getSpecificationsAccess().getGroup(), "rule__Specifications__Group__0");
			builder.put(grammarAccess.getLayoutSpecAccess().getGroup(), "rule__LayoutSpec__Group__0");
			builder.put(grammarAccess.getVerticalSpecAccess().getGroup(), "rule__VerticalSpec__Group__0");
			builder.put(grammarAccess.getHorizontalSpecAccess().getGroup(), "rule__HorizontalSpec__Group__0");
			builder.put(grammarAccess.getLabelSpecAccess().getGroup(), "rule__LabelSpec__Group__0");
			builder.put(grammarAccess.getButtonSpecAccess().getGroup(), "rule__ButtonSpec__Group__0");
			builder.put(grammarAccess.getInputSpecAccess().getGroup(), "rule__InputSpec__Group__0");
			builder.put(grammarAccess.getCheckboxSpecAccess().getGroup(), "rule__CheckboxSpec__Group__0");
			builder.put(grammarAccess.getSizeSpecAccess().getGroup(), "rule__SizeSpec__Group__0");
			builder.put(grammarAccess.getSizeSpecAccess().getGroup_1_0(), "rule__SizeSpec__Group_1_0__0");
			builder.put(grammarAccess.getSizeSpecAccess().getGroup_1_1(), "rule__SizeSpec__Group_1_1__0");
			builder.put(grammarAccess.getValidateAccess().getGroup(), "rule__Validate__Group__0");
			builder.put(grammarAccess.getTextValidateAccess().getGroup(), "rule__TextValidate__Group__0");
			builder.put(grammarAccess.getRegexValidateAccess().getGroup(), "rule__RegexValidate__Group__0");
			builder.put(grammarAccess.getRegexVariableValidateAccess().getGroup(), "rule__RegexVariableValidate__Group__0");
			builder.put(grammarAccess.getRequireElementsAccess().getGroup(), "rule__RequireElements__Group__0");
			builder.put(grammarAccess.getRequireOrAccess().getGroup(), "rule__RequireOr__Group__0");
			builder.put(grammarAccess.getRequireOrAccess().getGroup_1(), "rule__RequireOr__Group_1__0");
			builder.put(grammarAccess.getRequireAndAccess().getGroup(), "rule__RequireAnd__Group__0");
			builder.put(grammarAccess.getRequireAndAccess().getGroup_1(), "rule__RequireAnd__Group_1__0");
			builder.put(grammarAccess.getRequireBaseAccess().getGroup_0(), "rule__RequireBase__Group_0__0");
			builder.put(grammarAccess.getRequireBaseAccess().getGroup_1(), "rule__RequireBase__Group_1__0");
			builder.put(grammarAccess.getRequireBaseAccess().getGroup_2(), "rule__RequireBase__Group_2__0");
			builder.put(grammarAccess.getGUIAccess().getMainAssignment(), "rule__GUI__MainAssignment");
			builder.put(grammarAccess.getUnitAccess().getLayoutAssignment_1(), "rule__Unit__LayoutAssignment_1");
			builder.put(grammarAccess.getUnitAccess().getSpecificationsAssignment_2(), "rule__Unit__SpecificationsAssignment_2");
			builder.put(grammarAccess.getLayoutAccess().getNameAssignment_2(), "rule__Layout__NameAssignment_2");
			builder.put(grammarAccess.getLayoutAccess().getEntitiesAssignment_4(), "rule__Layout__EntitiesAssignment_4");
			builder.put(grammarAccess.getVerticalAccess().getNameAssignment_2(), "rule__Vertical__NameAssignment_2");
			builder.put(grammarAccess.getVerticalAccess().getEntitiesAssignment_4(), "rule__Vertical__EntitiesAssignment_4");
			builder.put(grammarAccess.getHorizontalAccess().getNameAssignment_2(), "rule__Horizontal__NameAssignment_2");
			builder.put(grammarAccess.getHorizontalAccess().getEntitiesAssignment_4(), "rule__Horizontal__EntitiesAssignment_4");
			builder.put(grammarAccess.getLabelAccess().getNameAssignment_2(), "rule__Label__NameAssignment_2");
			builder.put(grammarAccess.getButtonAccess().getNameAssignment_2(), "rule__Button__NameAssignment_2");
			builder.put(grammarAccess.getInputAccess().getNameAssignment_2(), "rule__Input__NameAssignment_2");
			builder.put(grammarAccess.getCheckboxAccess().getNameAssignment_2(), "rule__Checkbox__NameAssignment_2");
			builder.put(grammarAccess.getSpecificationsAccess().getSpecificationsAssignment_3(), "rule__Specifications__SpecificationsAssignment_3");
			builder.put(grammarAccess.getSpecificationAccess().getTypeAssignment(), "rule__Specification__TypeAssignment");
			builder.put(grammarAccess.getLayoutSpecAccess().getRefAssignment_0(), "rule__LayoutSpec__RefAssignment_0");
			builder.put(grammarAccess.getVerticalSpecAccess().getRefAssignment_0(), "rule__VerticalSpec__RefAssignment_0");
			builder.put(grammarAccess.getHorizontalSpecAccess().getRefAssignment_0(), "rule__HorizontalSpec__RefAssignment_0");
			builder.put(grammarAccess.getLabelSpecAccess().getRefAssignment_0(), "rule__LabelSpec__RefAssignment_0");
			builder.put(grammarAccess.getButtonSpecAccess().getRefAssignment_0(), "rule__ButtonSpec__RefAssignment_0");
			builder.put(grammarAccess.getButtonSpecAccess().getOptionsAssignment_3(), "rule__ButtonSpec__OptionsAssignment_3");
			builder.put(grammarAccess.getInputSpecAccess().getRefAssignment_0(), "rule__InputSpec__RefAssignment_0");
			builder.put(grammarAccess.getInputSpecAccess().getOptionsAssignment_3(), "rule__InputSpec__OptionsAssignment_3");
			builder.put(grammarAccess.getCheckboxSpecAccess().getRefAssignment_0(), "rule__CheckboxSpec__RefAssignment_0");
			builder.put(grammarAccess.getSizeSpecAccess().getWidthAssignment_1_0_0(), "rule__SizeSpec__WidthAssignment_1_0_0");
			builder.put(grammarAccess.getSizeSpecAccess().getHeightAssignment_1_0_2(), "rule__SizeSpec__HeightAssignment_1_0_2");
			builder.put(grammarAccess.getSizeSpecAccess().getWidthAssignment_1_1_1(), "rule__SizeSpec__WidthAssignment_1_1_1");
			builder.put(grammarAccess.getSizeSpecAccess().getHeightAssignment_1_1_3(), "rule__SizeSpec__HeightAssignment_1_1_3");
			builder.put(grammarAccess.getValidateAccess().getValidationsAssignment_1(), "rule__Validate__ValidationsAssignment_1");
			builder.put(grammarAccess.getTextValidateAccess().getValidationAssignment_1(), "rule__TextValidate__ValidationAssignment_1");
			builder.put(grammarAccess.getRegexValidateAccess().getValueAssignment_2(), "rule__RegexValidate__ValueAssignment_2");
			builder.put(grammarAccess.getRegexVariableValidateAccess().getValueAssignment_2(), "rule__RegexVariableValidate__ValueAssignment_2");
			builder.put(grammarAccess.getRegexVariableRefAccess().getRefAssignment(), "rule__RegexVariableRef__RefAssignment");
			builder.put(grammarAccess.getPresetTextValidateAccess().getValueAssignment_0(), "rule__PresetTextValidate__ValueAssignment_0");
			builder.put(grammarAccess.getPresetTextValidateAccess().getValueAssignment_1(), "rule__PresetTextValidate__ValueAssignment_1");
			builder.put(grammarAccess.getCheckboxValidateAccess().getValueAssignment(), "rule__CheckboxValidate__ValueAssignment");
			builder.put(grammarAccess.getRequireElementsAccess().getElementsAssignment_1(), "rule__RequireElements__ElementsAssignment_1");
			builder.put(grammarAccess.getRequireOrAccess().getRightAssignment_1_2(), "rule__RequireOr__RightAssignment_1_2");
			builder.put(grammarAccess.getRequireAndAccess().getRightAssignment_1_2(), "rule__RequireAnd__RightAssignment_1_2");
			builder.put(grammarAccess.getRequireBaseAccess().getExpAssignment_0_1(), "rule__RequireBase__ExpAssignment_0_1");
			builder.put(grammarAccess.getRequireBaseAccess().getExpAssignment_1_2(), "rule__RequireBase__ExpAssignment_1_2");
			builder.put(grammarAccess.getRequireBaseAccess().getRefAssignment_2_1(), "rule__RequireBase__RefAssignment_2_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GuilangGrammarAccess grammarAccess;

	@Override
	protected InternalGuilangParser createParser() {
		InternalGuilangParser result = new InternalGuilangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GuilangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GuilangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
